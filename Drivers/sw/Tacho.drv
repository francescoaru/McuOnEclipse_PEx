%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    15.10.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\TachoSettings.Inc
%define! Abstract Common\TachoAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

#if %@sdk@'ModuleName'%.SDK_VERSION_USED == %@sdk@'ModuleName'%.SDK_VERSION_NONE
%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
  #include "%'var'.h"
  %endfor
%endif
  #include "%ProcessorModule.h"
#endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSpeed
%ifdef GetSpeed
int16_t %'ModuleName'%.%GetSpeed(void);
%define! RetVal
%include Common\TachoGetSpeed.Inc

%endif %- GetSpeed
%-BW_METHOD_END GetSpeed
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
#define %'ModuleName'%.%GetVal() %'ModuleName'%.%GetSpeed()
/* function is implemented as macro
int16_t %'ModuleName'%.%GetVal(void);
*/
%define! RetVal
%include Common\TachoGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Sample
%ifdef Sample
void %'ModuleName'%.%Sample(void);
%include Common\TachoSample.Inc

%endif %- Sample
%-BW_METHOD_END Sample
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\TachoSettings.Inc
%define! Abstract Common\TachoAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

%if %RPMenabled = 'yes'
#define NOF_ROUND_PULSE   (%PulseCount)    /* number of pluses per round, given by encoder hardware, and we are detecting 4 steps for each period */
%endif
#define SPEED_CALC_PERIOD ((uint16_t)%SamplePeriodMs)     /* speed sample period in ms. Make sure that speed is sampled at the given rate. */
#define NOF_HISTORY (%NofSamples+1U) /* number of samples for speed calculation (>0):the more, the better, but the slower. For efficient code, make it a (power of 2)+1 */
static volatile uint16_t %'ModuleName'%.PosHistory[NOF_HISTORY]; /* for better accuracy, we calculate the speed over some samples */
static volatile uint8_t %'ModuleName'%.PosHistory_Index = 0;

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSpeed
%ifdef GetSpeed
%define! RetVal
%include Common\TachoGetSpeed.Inc
int16_t %'ModuleName'%.%GetSpeed(void)
{
  %@CriticalSection@'ModuleName'%.CriticalVariable();
%if %RPMenabled = 'yes'
  /* we calculate the speed as follow:
                           1000                  1
  RPM =  60 * delta * ----------------- * ----------------
                      samplePeriod (ms)   #Pulse per Round
  As this function may be called very frequently, it is important to make it as efficient as possible!
   */
%endif
  int16_t delta, pos, curr, speed;
%if %AbsoluteSpeed = 'no'
  bool neg;
%endif

  %@CriticalSection@'ModuleName'%.EnterCritical();
  curr = (int16_t)%'ModuleName'%.PosHistory[%'ModuleName'%.PosHistory_Index];
  if (%'ModuleName'%.PosHistory_Index == 0) {
    pos = (int16_t)%'ModuleName'%.PosHistory[NOF_HISTORY-1];
  } else {
    pos = (int16_t)%'ModuleName'%.PosHistory[%'ModuleName'%.PosHistory_Index-1];
  }
  %@CriticalSection@'ModuleName'%.ExitCritical();
  delta = curr-pos;
  if (delta < 0) {
    delta = -delta;
%if %AbsoluteSpeed = 'no'
    neg = TRUE;
  } else {
    neg = FALSE;
%endif
  }
%if %RPMenabled = 'yes'
  /* We do constant folding here to avoid floating point.
     Need to do on 32bit (unsigned long) to avoid overflow. */
  speed = (int16_t)((uint16_t)delta * (uint16_t)((60UL*1000)/(NOF_ROUND_PULSE*SPEED_CALC_PERIOD*(NOF_HISTORY-1))));
%else
  /* calculate speed in ticks */
  %:a=%TicksTimeMs
  %:b=%SamplePeriodMs
  %:c=%NofSamples
  %-
  %- try a mod b
  %:mod=%a
  %:mod%=%b
  %if (%a >. %b) & %mod = '0'
    %:a/=%b
    %:b=1
  %endif
  %-
  %- try a mod c
  %:mod=%a
  %:mod%=%c
  %if (%a >. %c) & %mod = '0'
    %:a/=%c
    %:c=1
  %endif
  %-
  %- try c mod a
  %:mod=%c
  %:mod%=%a
  %if (%c >. %a) & %mod = '0'
    %:c/=%a
    %:a=1
  %endif
  %-
  %- try b mod a
  %:mod=%b
  %:mod%=%a
  %if (%b >. %a) & %mod = '0'
    %:b/=%a
    %:a=1
  %endif
  %-
  %- combine b*c => b
  %:b*=%c
  %-
  %for i from [2..9]
    %- try to reduce more
    %:mod=%a
    %:mod%=%i
    %:mod2=%b
    %:mod2%=%i
    %if %mod = '0' & %mod2 = '0'
      %:a/=%i
      %:b/=%i
    %endif
  %endfor
  %-
  %- speed = ((uint16_t)delta)*(%TicksTimeMs/(%SamplePeriodMs*%NofSamples));
  %- speed = ((uint16_t)delta)* (%a/%c);
  speed = ((uint16_t)delta)
  %if %a <> '1'
    %+ *%a
  %endif
  %if %b <> '1'
    %+ /%b
  %endif
    %+ ;
%endif
%if %AbsoluteSpeed = 'no'
  if (neg) {
    speed = -speed;
  }
%endif
  return speed;
}

%endif %- GetSpeed
%-BW_METHOD_END GetSpeed
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\TachoGetVal.Inc
/* this function is implemented as macro in the header file
int16_t %'ModuleName'%.%GetVal(void)
{
  return %'ModuleName'%.%GetSpeed();
}
*/

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Sample
%ifdef Sample
%include Common\TachoSample.Inc
void %'ModuleName'%.%Sample(void)
{
  %'ModuleName'%.PosHistory[%'ModuleName'%.PosHistory_Index] = %@Counter@'ModuleName'%.GetPos();
  %'ModuleName'%.PosHistory_Index++;
  if (%'ModuleName'%.PosHistory_Index >= NOF_HISTORY) {
    %'ModuleName'%.PosHistory_Index = 0;
  }
}

%endif %- Sample
%-BW_METHOD_END Sample
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-************************************************************************************************************
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
