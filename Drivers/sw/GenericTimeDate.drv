%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    22.07.2012
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\GenericTimeDateSettings.Inc
%define! Abstract Common\GenericTimeDateAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

#if %@sdk@'ModuleName'%.SDK_VERSION_USED == %@sdk@'ModuleName'%.SDK_VERSION_NONE
%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
  #include "%'var'.h"
  %endfor
%endif
  #include "%ProcessorModule.h"
#endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"

%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand

#ifndef __BWUserType_TIMEREC
#define __BWUserType_TIMEREC
  typedef struct {                                               %>40/* It contains actual number of hours, minutes, seconds and hundreth of seconds. */
    uint8_t Hour;                                                %>40/* hours (0 - 23) */
    uint8_t Min;                                                 %>40/* minutes (0 - 59) */
    uint8_t Sec;                                                 %>40/* seconds (0 - 59) */
    uint8_t Sec100;                                              %>40/* hundredth of seconds (0 - 99) */
  } TIMEREC;
#endif
#ifndef __BWUserType_DATEREC
#define __BWUserType_DATEREC
  typedef struct {                                               %>40/* It contains actual year, month, and day description. */
    uint16_t Year;                                               %>40/* years (1998 - 2099) */
    uint8_t Month;                                               %>40/* months (1 - 12) */
    uint8_t Day;                                                 %>40/* days (1 - 31) */
  } DATEREC;
#endif
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
uint8_t %'ModuleName'%.%SetTime(uint8_t Hour, uint8_t Min, uint8_t Sec, uint8_t Sec100);
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\GenericTimeDateSetTime.Inc

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
void %'ModuleName'%.%AddTick(void);
%include Common\GenericTimeDateAddTick.Inc

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
uint8_t %'ModuleName'%.%GetTime(TIMEREC *Time);
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateGetTime.Inc

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
uint8_t %'ModuleName'%.%SetDate(uint16_t Year, uint8_t Month, uint8_t Day);
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateSetDate.Inc

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
uint8_t %'ModuleName'%.%GetDate(DATEREC *Date);
%define! ParDate
%define! RetVal
%include Common\GenericTimeDateGetDate.Inc

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\GenericTimeDateInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\GenericTimeDateParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN DeInit
%ifdef DeInit
void %'ModuleName'%.%DeInit(void);
%include Common\GenericTimeDateDeInit.Inc

%endif %- DeInit
%-BW_METHOD_END DeInit
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTicks
%ifdef AddTicks
void %'ModuleName'%.%AddTicks(uint16_t nofTicks);
%define! ParnofTicks
%include Common\GenericTimeDateAddTicks.Inc

%endif %- AddTicks
%-BW_METHOD_END AddTicks
%-************************************************************************************************************
%-BW_METHOD_BEGIN TicksToTime
%ifdef TicksToTime
uint8_t %'ModuleName'%.%TicksToTime(uint32_t ticks, TIMEREC *Time);
%define! Particks
%define! Partime
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateTicksToTime.Inc

%endif %- TicksToTime
%-BW_METHOD_END TicksToTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeToTicks
%ifdef TimeToTicks
uint8_t %'ModuleName'%.%TimeToTicks(TIMEREC *Time, uint32_t *ticks);
%define! Partime
%define! Particks
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateTimeToTicks.Inc

%endif %- TimeToTicks
%-BW_METHOD_END TimeToTicks
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnDateSet
%ifdef OnDateSet
%INTERFACE OnDateSet
void %OnDateSet(uint8_t day, uint8_t month, uint16_t year);
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateSet.Inc

%endif %- OnDateSet
%-BW_METHOD_END OnDateSet
%-BW_METHOD_BEGIN OnTimeSet
%ifdef OnTimeSet
%INTERFACE OnTimeSet
void %OnTimeSet(uint8_t hour, uint8_t minute, uint8_t second, uint8_t hSecond);
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeSet.Inc

%endif %- OnTimeSet
%-BW_METHOD_END OnTimeSet
%-BW_METHOD_BEGIN OnTimeGet
%ifdef OnTimeGet
%INTERFACE OnTimeGet
void %OnTimeGet(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond);
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeGet.Inc

%endif %- OnTimeGet
%-BW_METHOD_END OnTimeGet
%-BW_METHOD_BEGIN OnDateGet
%ifdef OnDateGet
%INTERFACE OnDateGet
void %OnDateGet(uint8_t *day, uint8_t *month, uint16_t *year);
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateGet.Inc

%endif %- OnDateGet
%-BW_METHOD_END OnDateGet
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\GenericTimeDateSettings.Inc
%define! Abstract Common\GenericTimeDateAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define %'ModuleName'%.TICK_TIME_MS \
%if defined(RTOS)
  (1000/%@RTOS@TickRateHz)                                       %>40 /* Period in milliseconds as defined in RTOS component properties, at which %'ModuleName'%.AddTick() is called */
%else
  %TickTimeMs                                                    %>40 /* Period in milliseconds as defined in component properties, at which %'ModuleName'.%.AddTick() is called */
%endif
#if %'ModuleName'%.TICK_TIME_MS==0
  #error "Tick period cannot be zero!"
#endif
#define %'ModuleName'%.TICKS_PER_S  (1000/%'ModuleName'%.TICK_TIME_MS)%>40/* number of timer ticks per second */

static uint8_t CntDay;                                           %>40/* Day counter */
static uint8_t CntMonth;                                         %>40/* Month counter */
static uint16_t CntYear;                                         %>40/* Year Counter */
static uint32_t tickCntr;                                        %>40/* Software tick counter (1 tick = %'ModuleName'%.TICK_TIME_MS ms) */

/* Table of month length (in days) */
static const uint8_t ULY[12] = {31U,28U,31U,30U,31U,30U,31U,31U,30U,31U,30U,31U}; /* Un-leap-year */
static const uint8_t  LY[12] = {31U,29U,31U,30U,31U,30U,31U,31U,30U,31U,30U,31U}; /* Leap-year */

%ifdef ParseCommand
static uint8_t AddDate(uint8_t *buf, uint16_t bufSize) {
  DATEREC tdate;

  if (%'ModuleName'%.%GetDate(&tdate)!=ERR_OK) {
    return ERR_FAILED;
  }
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, tdate.Day, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, tdate.Month, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16u(buf, bufSize, (uint16_t)tdate.Year);
  return ERR_OK;
}

static uint8_t AddTime(uint8_t *buf, uint16_t bufSize) {
  TIMEREC ttime;

  if (%'ModuleName'%.%GetTime(&ttime)!=ERR_OK) {
    return ERR_FAILED;
  }
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.Hour, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.Min, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.Sec, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ',');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.Sec100, '0', 2);
  return ERR_OK;
}

static uint8_t DateCmd(const unsigned char *cmd, %@Shell@'ModuleName'%.ConstStdIOType *io) {
  /* precondition: cmd points to "%'ModuleName' date" */
  uint8_t day, month;
  uint16_t year;
  const unsigned char *p;
  uint8_t res = ERR_OK;

  p = cmd + sizeof("%'ModuleName' date")-1;
  if (*p==' ') { /* ok, have an argument */
    if (%@Utility@'ModuleName'%.ScanDate(&p, &day, &month, &year) == ERR_OK) { /* ok, format fine */
      /* update real time clock */
      res = %'ModuleName'%.%SetDate(year, month, day);
      if (res != ERR_OK) {
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failure setting time\r\n", io->stdErr);
        res = ERR_FAILED;
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** error while reading command! ***", io->stdErr);
      %@Shell@'ModuleName'%.SendStr((void *)cmd, io->stdErr);
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdErr);
      res = ERR_FAILED;
    }
  } /* has an argument */
  /* print now current date */
  if (res==ERR_OK) {
    unsigned char buf[sizeof("Wednesday dd:mm:yyyy\\r\\n")];

    buf[0]='\0';
    if (AddDate(buf, sizeof(buf))!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get date\r\n", io->stdErr);
      res = ERR_FAILED;
    } else {
      %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
    }
  }
  return res;
}

static uint8_t TimeCmd(const unsigned char *cmd, %@Shell@'ModuleName'%.ConstStdIOType *io) {
  uint8_t hour, minute, second, hSecond;
  const unsigned char *p;
  uint8_t res = ERR_OK;

  p = cmd + sizeof("%'ModuleName' time")-1;
  if (*p==' ') { /* has an argument */
    if (%@Utility@'ModuleName'%.ScanTime(&p, &hour, &minute, &second, &hSecond)==ERR_OK) { /* format fine */
      /* set RTC time */
      res = %'ModuleName'%.%SetTime(hour, minute, second, hSecond);
      if (res != ERR_OK) {
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failure setting time\r\n", io->stdErr);
        res = ERR_FAILED;
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Error while reading command: ", io->stdErr);
      %@Shell@'ModuleName'%.SendStr(cmd, io->stdErr);
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdErr);
      res = ERR_FAILED;
    }
  }
  /* print now current time */
  if (res==ERR_OK) {
    unsigned char buf[sizeof("hh:mm:ss.hh\\r\\n")];

    buf[0] = '\0';
    if (AddTime(buf, sizeof(buf))!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get time\r\n", io->stdErr);
      res = ERR_FAILED;
    } else {
      %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
    }
  }
  return res;
}

static uint8_t PrintStatus(%@Shell@'ModuleName'%.ConstStdIOType *io) {
  uint8_t buf[24];

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"", io->stdOut);
  buf[0] = '\0';
  if (AddDate(buf, sizeof(buf))!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get date!\r\n", io->stdErr);
    return ERR_FAILED;
  }
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)", ");
  if (AddTime(buf, sizeof(buf))!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get time!\r\n", io->stdErr);
    return ERR_FAILED;
  } else {
    %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  }
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
  return ERR_OK;
}

%endif %- ParseCommand
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\GenericTimeDateSetTime.Inc
#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C5905 /* multiplication with one (happens if %'ModuleName'%.TICKS_PER_S is 100) */
#endif
uint8_t %'ModuleName'%.%SetTime(uint8_t Hour, uint8_t Min, uint8_t Sec, uint8_t Sec100)
{
  uint32_t nofTicks;
  TIMEREC time;
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  if ((Sec100>99U) || (Sec>59U) || (Min>59U) || (Hour>23U)) {    %>40/* Test correctnes of given time */
    return ERR_RANGE;                                            %>40/* If not correct then error */
  }
%if defined(OnTimeSet)
  %OnTimeSet(Hour, Min, Sec, Sec100); /* call user event */
%endif
  time.Hour = Hour;
  time.Min = Min;
  time.Sec = Sec;
  time.Sec100 = Sec100;
  (void)%'ModuleName'%.%TimeToTicks(&time, &nofTicks);
  %@CriticalSection@'ModuleName'%.EnterCritical();
  tickCntr = nofTicks;
  %@CriticalSection@'ModuleName'%.ExitCritical();
  return ERR_OK;                                                 %>40/* OK */
}
#ifdef __HIWARE__
  #pragma MESSAGE DEFAULT C5905 /* multiplication with one  */
#endif

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
%include Common\GenericTimeDateAddTick.Inc
void %'ModuleName'%.%AddTick(void)
{
  const uint8_t *ptr;                                            %>40/* Pointer to ULY/LY table */
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  %@CriticalSection@'ModuleName'%.EnterCritical();               %>40/* need exclusive access to tick counter */
  tickCntr++;                                                    %>40/* Software timer counter increment by timer period */
  %@CriticalSection@'ModuleName'%.ExitCritical();                %>40/* end of critical section */
  if (tickCntr >= 24*3600UL*%'ModuleName'%.TICKS_PER_S) {        %>40/* Does the counter reach 24 hours? */
    tickCntr -= 24*3600UL*%'ModuleName'%.TICKS_PER_S;            %>40/* If yes then reset it by subtracting exactly 24 hours */
    %@CriticalSection@'ModuleName'%.EnterCritical();
    CntDay++;                                                    %>40/* Increment day counter */
    %@CriticalSection@'ModuleName'%.ExitCritical();
    if (CntYear & 0x03U) {                                       %>40/* Is this year un-leap-one? */
      ptr = ULY;                                                 %>40/* Set pointer to un-leap-year day table */
    } else {                                                     %>40/* Is this year leap-one? */
      ptr = LY;                                                  %>40/* Set pointer to leap-year day table */
    }
    ptr--;                                                       %>40/* Decrement the pointer */
    if (CntDay > ptr[CntMonth]) {                                %>40/* Day counter overflow? */
      CntDay = 1U;                                               %>40/* Set day counter on 1 */
      %@CriticalSection@'ModuleName'%.EnterCritical();
      CntMonth++;                                                %>40/* Increment month counter */
      %@CriticalSection@'ModuleName'%.ExitCritical();
      if (CntMonth > 12U) {                                      %>40/* Month counter overflow? */
        CntMonth = 1U;                                           %>40/* Set month counter on 1 */
        %@CriticalSection@'ModuleName'%.EnterCritical();
        CntYear++;                                               %>40/* Increment year counter */
        %@CriticalSection@'ModuleName'%.ExitCritical();
      }
    }
  }
}

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTicks
%ifdef AddTicks
%define! ParnofTicks
%include Common\GenericTimeDateAddTicks.Inc
void %'ModuleName'%.%AddTicks(uint16_t nofTicks)
{
  while(nofTicks>0) {
    %'ModuleName'%.%AddTick();
    nofTicks--;
  }
}

%endif %- AddTicks
%-BW_METHOD_END AddTicks
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateGetTime.Inc
uint8_t %'ModuleName'%.%GetTime(TIMEREC *Time)
{
  uint32_t ticks;                                                %>40/* temporary variable of software tick counter */
  uint8_t res;
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  %@CriticalSection@'ModuleName'%.EnterCritical();               %>40/* need exclusive access to tick counter */
  ticks = tickCntr;                                              %>40/* actual number of ticks */
  %@CriticalSection@'ModuleName'%.ExitCritical();                %>40/* end of critical section */

  res = %'ModuleName'%.%TicksToTime(ticks, Time);
%if defined(OnTimeGet)
  %OnTimeGet(&Time->Hour, &Time->Min, &Time->Sec, &Time->Sec100); /* call user event */
%endif
  return res;
}

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateSetDate.Inc
uint8_t %'ModuleName'%.%SetDate(uint16_t Year, uint8_t Month, uint8_t Day)
{
  const uint8_t* ptr;                                            %>40/* Pointer to ULY/LY table */
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  if ((Year < 1998U) || (Year > 2099U) || (Month > 12U) || (Month == 0U) || (Day > 31U) || (Day == 0U)) {%>40/* Test correctness of given parameters */
    return ERR_RANGE;                                            %>40/* If not correct then error */
  }
  ptr = (((Year & 0x03U) != 0U) ? ULY : LY);                     %>40/* Set pointer to leap-year or un-leap-year day table */
  if (ptr[Month - 1U] < Day) {                                   %>40/* Does the obtained number of days exceed number of days in the appropriate month & year? */
    return ERR_RANGE;                                            %>40/* If yes (incorrect date inserted) then error */
  }
%if defined(OnDateSet)
  %OnDateSet(Day, Month, Year); /* call user event */
%endif
  %@CriticalSection@'ModuleName'%.EnterCritical();               %>40/* Save the PS register */
  CntDay = Day;                                                  %>40/* Set day counter to the given value */
  CntMonth = Month;                                              %>40/* Set month counter to the given value */
  CntYear = Year;                                                %>40/* Set year counter to the given value */
  %@CriticalSection@'ModuleName'%.ExitCritical();                %>40/* Restore the PS register */
  return ERR_OK;                                                 %>40/* OK */
}

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
%define! ParDate
%define! RetVal
%include Common\GenericTimeDateGetDate.Inc
uint8_t %'ModuleName'%.%GetDate(DATEREC *Date)
{
  %@CriticalSection@'ModuleName'%.CriticalVariable()

%if defined(OnDateGet)
  %OnDateGet(&CntDay, &CntMonth, &CntYear); /* call user event */
%endif
  %@CriticalSection@'ModuleName'%.EnterCritical();               %>40/* Save the PS register */
  Date->Year = CntYear;                                          %>40/* Year */
  Date->Month = CntMonth;                                        %>40/* Month */
  Date->Day = CntDay;                                            %>40/* Day */
  %@CriticalSection@'ModuleName'%.ExitCritical();                %>40/* Restore the PS register */
  return ERR_OK;                                                 %>40/* OK */
}

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\GenericTimeDateInit.Inc
void %'ModuleName'%.%Init(void)
{
%if %InitializationEnabled='yes'
  /* initialize date/time as set in properties */
  (void)%'ModuleName'%.%SetTime(%InitialTimeHour, %InitialTimeMin, %InitialTimeSec, 0);
  (void)%'ModuleName'%.%SetDate(%InitialDateYear, %InitialDateMonth, %InitialDateDay);
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\GenericTimeDateParseCommand.Inc
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (const unsigned char*)"Print help or status information\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  time [hh:mm:ss[,z]]", (const unsigned char*)"Set the current time. Prints the current time if no argument\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  date [dd.mm.yyyy]", (const unsigned char*)"Set the current date. Prints the current date if no argument\r\n", io->stdOut);
    *handled = TRUE;
    return ERR_OK;
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' date", sizeof("%'ModuleName' date")-1)==0) {
    *handled = TRUE;
    return DateCmd(cmd, io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' time", sizeof("%'ModuleName' time")-1)==0) {
    *handled = TRUE;
    return TimeCmd(cmd, io);
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN DeInit
%ifdef DeInit
%include Common\GenericTimeDateDeInit.Inc
void %'ModuleName'%.%DeInit(void)
{
  /* Nothing to do */
}

%endif %- DeInit
%-BW_METHOD_END DeInit
%-************************************************************************************************************
%-BW_METHOD_BEGIN TicksToTime
%ifdef TicksToTime
%define! Particks
%define! Partime
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateTicksToTime.Inc
uint8_t %'ModuleName'%.%TicksToTime(uint32_t ticks, TIMEREC *Time)
{
  Time->Hour = (uint8_t)(ticks/(3600*%'ModuleName'%.TICKS_PER_S));%>40/* number of hours */
  ticks %%= (3600*%'ModuleName'%.TICKS_PER_S);                   %>40/* remainder of ticks inside hour */
  Time->Min = (uint8_t)(ticks/(60*%'ModuleName'%.TICKS_PER_S));  %>40/* number of minutes */
  ticks %%= (60*%'ModuleName'%.TICKS_PER_S);                     %>40/* remainder of ticks inside minute */
  Time->Sec = (uint8_t)(ticks/%'ModuleName'%.TICKS_PER_S);       %>40/* number of seconds */
  ticks %%= %'ModuleName'%.TICKS_PER_S;
  Time->Sec100 = (uint8_t)((ticks*(1000/%'ModuleName'%.TICKS_PER_S))/10);%>40/* number of 1/100 seconds */
  return ERR_OK;
}

%endif %- TicksToTime
%-BW_METHOD_END TicksToTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeToTicks
%ifdef TimeToTicks
%define! Partime
%define! Particks
%define! ParTime
%define! RetVal
%include Common\GenericTimeDateTimeToTicks.Inc
uint8_t %'ModuleName'%.%TimeToTicks(TIMEREC *Time, uint32_t *ticks)
{
  uint32_t cntr;

  cntr = (3600UL*%'ModuleName'%.TICKS_PER_S*(uint32_t)Time->Hour)
              + (60UL*%'ModuleName'%.TICKS_PER_S*(uint32_t)Time->Min)
              + (%'ModuleName'%.TICKS_PER_S*(uint32_t)Time->Sec)
              + ((%'ModuleName'%.TICKS_PER_S/100)*(uint32_t)Time->Sec100);%>40/* Load given time re-calculated to %'ModuleName'%.TICK_TIME_MS ms ticks into software tick counter */
  *ticks = cntr;
  return ERR_OK;
}

%endif %- TimeToTicks
%-BW_METHOD_END TimeToTicks
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnDateSet
%ifdef OnDateSet
%IMPLEMENTATION OnDateSet
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateSet.Inc
void %OnDateSet(uint8_t day, uint8_t month, uint16_t year)
{
  /* Write your code here ... */
}

%endif %- OnDateSet
%-BW_METHOD_END OnDateSet
%-BW_METHOD_BEGIN OnTimeSet
%ifdef OnTimeSet
%IMPLEMENTATION OnTimeSet
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeSet.Inc
void %OnTimeSet(uint8_t hour, uint8_t minute, uint8_t second, uint8_t hSecond)
{
  /* Write your code here ... */
}

%endif %- OnTimeSet
%-BW_METHOD_END OnTimeSet
%-BW_METHOD_BEGIN OnTimeGet
%ifdef OnTimeGet
%IMPLEMENTATION OnTimeGet
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeGet.Inc
void %OnTimeGet(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond)
{
  /* Write your code here ... */
}

%endif %- OnTimeGet
%-BW_METHOD_END OnTimeGet
%-BW_METHOD_BEGIN OnDateGet
%ifdef OnDateGet
%IMPLEMENTATION OnDateGet
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateGet.Inc
void %OnDateGet(uint8_t *day, uint8_t *month, uint16_t *year)
{
  /* Write your code here ... */
}

%endif %- OnDateGet
%-BW_METHOD_END OnDateGet
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if %InitInStartup='yes'
  %'ModuleName'%.%Init();
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
