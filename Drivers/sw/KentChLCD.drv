%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    15.01.2009
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_PutDataCharSPI Function to send a data byte to the SPI bus.
%define! Description_PutCmdCharSPI Function to send a command byte to the SPI bus.
%define! Description_LoadData Function to transfer data to the display.
%define! Description_RefreshRows Function to send parameter for up-dating the display screen with the data. The data are in the driver.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\KentChLCDSettings.Inc
%define! Abstract Common\KentChLCDAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS  %'Width'u         %>40/* we have 132 columns in hardware */
#define %'ModuleName'%.DISPLAY_HW_NOF_ROWS     %'Height'u        %>40/* we have 64 rows in hardware */

extern byte %'ModuleName'%.DisplayBuf[%'ModuleName'%.DISPLAY_HW_NOF_ROWS/8][%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS]; /* display buffer */

typedef bool %'ModuleName'%.PixelColor;                          %>40/* one bit is enough to describe the color as we have a monochrome display */
typedef byte %'ModuleName'%.PixelDim;                            %>40/* one byte is enough to describe an x/y position */

#define %'ModuleName'%.PIXEL_WHITE  1                            %>40/* 1 is a white pixel */
#define %'ModuleName'%.PIXEL_BLUE   0                            %>40/* 0 is a blue pixel */
#define %'ModuleName'%.COLOR_PIXEL_SET      %'ModuleName'%.PIXEL_WHITE%>40/* color for a pixel set */
#define %'ModuleName'%.COLOR_PIXEL_CLR      %'ModuleName'%.PIXEL_BLUE%>40/* color for a pixel cleared */
%if DisplayInvert='yes'
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_WHITE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_BLUE
%else
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_BLUE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_WHITE
%endif
#define %'ModuleName'%.COLOR_RED            %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_RED     %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_RED       %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREEN          %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREEN   %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_GREEN     %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BLUE           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_BLUE    %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_BLUE      %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_YELLOW         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_YELLOW  %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_ORANGE         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREY           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREY    %'ModuleName'%.COLOR_WHITE

typedef enum {
  %'ModuleName'%.ORIENTATION_PORTRAIT    = 0,
  %'ModuleName'%.ORIENTATION_PORTRAIT180 = 1,
  %'ModuleName'%.ORIENTATION_LANDSCAPE   = 2,
  %'ModuleName'%.ORIENTATION_LANDSCAPE180= 3
} %'ModuleName'%.DisplayOrientation;

#define %'ModuleName'%.HW_WIDTH         %'Width'u                %>40/* width of display in pixels */
#define %'ModuleName'%.HW_HEIGHT        %'Height'u               %>40/* height of display in pixels */

%if %Height <. %Width
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Height'u               %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Width'u                %>40/* size of longer display side in pixels */
%else
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Width'u                %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Height'u               %>40/* size of longer display side in pixels */
%endif


%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_PixelCount
#define __BWUserType_%'ModuleName'_PixelCount
  typedef word %'ModuleName'_PixelCount ;                        %>40/* A word is enough to count all pixels of the display. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ElectronicErase
%ifdef ElectronicErase
void %'ModuleName'%.%ElectronicErase(void);
%include Common\KentChLCDElectronicErase.Inc

%endif %- ElectronicErase
%-BW_METHOD_END ElectronicErase
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
void %'ModuleName'%.%UpdateFull(void);
%include Common\KentChLCDUpdateFull.Inc

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\KentChLCDUpdateRegion.Inc

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void);
%define! RetVal
%include Common\KentChLCDGetDisplayOrientation.Inc

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
#define %'ModuleName'%.%GetWidth() \
  %'ModuleName'%.HW_WIDTH

%define! RetVal
%include Common\KentChLCDGetWidth.Inc

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
#define %'ModuleName'%.%GetHeight() \
  %'ModuleName'%.HW_HEIGHT

%define! RetVal
%include Common\KentChLCDGetHeight.Inc

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
#define %'ModuleName'%.%GetShorterSide() \
  %'ModuleName'%.HW_SHORTER_SIDE

%define! RetVal
%include Common\KentChLCDGetShorterSide.Inc

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
#define %'ModuleName'%.%GetLongerSide() \
  %'ModuleName'%.HW_LONGER_SIDE

%define! RetVal
%include Common\KentChLCDGetLongerSide.Inc

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation);
%define! ParnewOrientation
%include Common\KentChLCDSetDisplayOrientation.Inc

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
void %'ModuleName'%.%GetLCD(void);
%include Common\KentChLCDGetLCD.Inc

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
byte %'ModuleName'%.%GiveLCD(void);
%define! RetVal
%include Common\KentChLCDGiveLCD.Inc

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\KentChLCDInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
byte %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\KentChLCDDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\KentChLCDSettings.Inc
%define! Abstract Common\KentChLCDAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"

/* ****************************************************************************
   Copyright (c) 2008. Kent Displays, Inc. All Rights Reserved.

   Permission to use, copy, modify, and distribute this software and its
   documentation for any purpose, without fee, and without a written
   agreement, is hereby granted, provided that the above copyright notice,
   this paragraph, the following two paragraphs appear in all copies,
   modifications, and distributions and is included with a Kent Displays,
   Inc. product.

   IN NO EVENT SHALL KENT DISPLAYS, INC. BE LIABLE TO ANY PARTY FOR DIRECT,
   INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
   LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
   DOCUMENTATION, EVEN IF KENT DISPLAYS, INC. HAS BEEN ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.

   KENT DISPLAYS, INC. SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT
   NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
   FOR A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING
   DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS".
   KENT DISPLAYS, INC. HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT,
   UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *************************************************************************** */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

/* -- Bitmasks for selecting command byte or data byte. -- */
#define CMD_MASK          0x00
#define DATA_MASK         0x01

/* -- Command definitions. -- */

/* Set Lower Column Address */
#define SET_COL_ADD_LSN   0x00

/* Set Higher Column Address */
#define SET_COL_ADD_MSN   0x10

/* Set Power Control Register */
#define SET_PWR_CTRL_REG  0x2A
#define BOOSTER_ON        0x04
#define BOOSTER_OFF       0x00
#define AMP_ON            0x01
#define AMP_OFF           0x00

/* Driving Update */
#define UPDATE            0x31

/* Driving Scheme (2-byte command) */
#define DRIVE_SCHEME      0x32
#define AA_CLR_DATA_0     0x40
#define AA_CLR_DATA_1     0x00
#define DUMMY_HI_Z        0x00
#define DUMMY_DATA_0      0x20
#define DUMMY_DATA_1      0x30
#define DRV_POL_X3_1      0x08
#define DRV_POL_X3_0      0x00
#define CLR_POL_X2_1      0x04
#define CLR_POL_X2_0      0x00
#define VA_CLR_DATA_0     0x00
#define VA_CLR_DATA_1     0x02
#define INV_ROW           0x00
#define INV_FRAME         0x01

/* Temperature Compensation (2-byte command) */
#define TEMP_COMP         0x33
#define TC_DISABLE        0x00
#define TC_VOLTAGE        0x01
#define TC_TIME           0x02
#define TC_VOLT_TIME      0x03

/* Set Display Start Line */
#define SET_DISP_START    0x40

/* Set Temp. Comp. Table (9-byte command - see datasheet) */
#define SET_TC0           0x80
#define SET_TC1           0x81
#define SET_TC2           0x82
#define SET_TC3           0x83
#define SET_TC4           0x84
#define SET_TC5           0x85
#define SET_TC6           0x86
#define SET_TC7           0x87

/* Set View Area Clear Stage Repeat Times (2-byte command) */
#define SET_VA_CLR_RPTS   0x93

/* Set Idle 1 Stage Repeat Times (2-byte command) */
#define SET_IDLE1_RPTS    0x94

// Set Active Area Clear Stage Repeat Times (2-byte command)
#define SET_AA_CLR_RPTS   0x95

/* Set Idle 2 Stage Repeat Times (2-byte command) */
#define SET_IDLE2_RPTS    0x96

/* Set Drive Stage Repeat Times (2-byte command) */
#define SET_DRIVE_RPTS    0x97

/* Set Segment Remap */
#define SET_SEG_REMAP     0xA0
#define SEG_REMAP_NO      0x00
#define SEG_REMAP_YES     0x01

/* Set LCD Bias (2-byte command) */
#define SET_LCD_BIAS      0xA2
#define BIAS_1_9P0        0x00
#define BIAS_1_8P0        0x01
#define BIAS_1_7P0        0x02
#define BIAS_1_6P0        0x03
#define BIAS_1_5P0        0x04
#define BIAS_1_4P6        0x05
#define BIAS_1_4P3        0x06
#define BIAS_1_4P0        0x07

/* Set Entire Display On/Off */
#define SET_ENTIRE_DISP   0xA4
#define ENTIRE_OFF        0x00
#define ENTIRE_ON         0x01

/* Set Normal/Reverse Display */
#define SET_REVERSE_MODE  0xA6
#define REVERSE_OFF       0x00
#define REVERSE_ON        0x01

/* Set Multiplex Ratio (2-byte command) */
#define SET_MUX           0xA8

/* Analog Control Auto On/Off (2-byte command) */
#define SET_ANALOG_AUTO   0xA9
#define AUTO_OFF          0x00
#define AUTO_ON           0x01

/* Set Temperature Control (2-byte command) */
#define SET_TEMP_CTRL     0xAB
#define TC_ANALOG_OFF     0x00
#define TC_ANALOG_ON      0x03

/* RAM Read/Write Direction (2-byte command) */
#define SET_RAM_DIR       0xAD
#define RAM_ACCESS_HORIZ  0x00
#define RAM_ACCESS_VERT   0x01

/* Set Page Address */
#define SET_PAGE_ADD      0xB0

/* Set COM Output Scan Direction */
#define SET_SCAN_DIR      0xC0
#define SCAN_NORMAL       0x00
#define SCAN_REVERSE      0x08

/* Set Display Offset (2-byte command) */
#define SET_DISP_OFFSET   0xD3

/* Software Reset */
#define SOFT_RESET        0xE2

/* No Operation */
#define NOP               0xE3

/* Temperature compensation data element definition. */
typedef struct {
  byte temp;
  byte clearPW;
  byte clearV;
  byte drivePW;
  byte driveV;
} TC_Table_Element;

/* Temperature compensation data table. */
static const TC_Table_Element TC[] =
{
  { 0x2c, 0x19 /* 350 ms */, 0x40 /* 24.0V */, 0x15 /* 100 ms */, 0x40 /* 24.0V */},  /* -5C */
  { 0x32, 0x16 /* 150 ms */, 0x44 /* 25.0V */, 0x12 /*  50 ms */, 0x44 /* 25.0V */},  /*  4C */
  { 0x36, 0x15 /* 100 ms */, 0x44 /* 25.0V */, 0x0f /*  30 ms */, 0x44 /* 25.0V */},  /* 10C */
  { 0x3a, 0x14 /*  80 ms */, 0x44 /* 25.0V */, 0x0e /*  25 ms */, 0x44 /* 25.0V */},  /* 16C */
  { 0x3e, 0x14 /*  80 ms */, 0x44 /* 25.0V */, 0x0d /*  20 ms */, 0x44 /* 25.0V */},  /* 22C */
  { 0x42, 0x13 /*  60 ms */, 0x44 /* 25.0V */, 0x0b /*  14 ms */, 0x44 /* 25.0V */},  /* 28C */
  { 0x46, 0x11 /*  40 ms */, 0x44 /* 25.0V */, 0x09 /*  10 ms */, 0x44 /* 25.0V */},  /* 34C */
  { 0x4a, 0x11 /*  30 ms */, 0x44 /* 25.0V */, 0x08 /*   8 ms */, 0x44 /* 25.0V */},  /* 40C */
};

byte %'ModuleName'%.DisplayBuf[%'ModuleName'%.DISPLAY_HW_NOF_ROWS/8][%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS];%>40/* display buffer */

%if %ControlVcc='yes'
#define ENABLE_VCC() \
  %@EnVcc@'ModuleName'%.SetVal();                                %>40/* enable display power */

#define DISABLE_VCC() \
  /* set Pins to low, disable supply by I/O pins in order not to damage display */ \
  %@DataCmdPin@'ModuleName'%.ClrVal();                           %>40/* low */ \
  %@CS@'ModuleName'%.ClrVal();                                   %>40/* low: Chip select Display. */ \
  %@Reset@'ModuleName'%.ClrVal();                                %>40/* low */ \
  %@EnVcc@'ModuleName'%.ClrVal();                                %>40/* disable VCC */
%endif

#define CHIP_SELECT_DISPLAY() \
  %@Wait@'ModuleName'%.Waitns(20); \
  %@CS@'ModuleName'%.ClrVal();                                   %>40/* Chip select Display. */ \
  %@Wait@'ModuleName'%.Waitns(20);

#define CHIP_DESELECT_DISPLAY() \
  %@Wait@'ModuleName'%.Waitns(20); \
  %@CS@'ModuleName'%.SetVal();                                   %>40/* Chip de-select Display. */ \
  %@Wait@'ModuleName'%.Waitns(20);


%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG PutDataCharSPI
static void PutDataCharSPI(byte data);
%-INTERNAL_LOC_METHOD_END PutDataCharSPI
%-INTERNAL_LOC_METHOD_BEG PutCmdCharSPI
static void PutCmdCharSPI(byte cmd);
%-INTERNAL_LOC_METHOD_END PutCmdCharSPI
%-INTERNAL_LOC_METHOD_BEG LoadData
static void LoadData(word index, word numBytes, byte *data);
%-INTERNAL_LOC_METHOD_END LoadData
%-INTERNAL_LOC_METHOD_BEG RefreshRows
static void RefreshRows(byte firstDataRow, byte firstImageRow, byte numRows);
%-INTERNAL_LOC_METHOD_END RefreshRows
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PutDataCharSPI
%define! Pardata
%include Common\GeneralInternalGlobal.inc (PutDataCharSPI)
static void PutDataCharSPI(byte data)
{
  CHIP_SELECT_DISPLAY();                                         %>40/* Chip select Display. The driver seems to require a new chip select to start each byte. */
  (void)%@SPI@'ModuleName'%.SendChar(data);                      %>40/* Bit bang data out MSB first.  Data changes on falling edge and is latched on rising. Clock is inactive low. */
  CHIP_DESELECT_DISPLAY();                                       %>40/* Chip deselect Display */
}

%-INTERNAL_METHOD_END PutDataCharSPI
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG PutCmdCharSPI
%define! Parcmd
%include Common\GeneralInternalGlobal.inc (PutCmdCharSPI)
static void PutCmdCharSPI(byte cmd)
{
  CHIP_SELECT_DISPLAY();                                         %>40/* Chip select Display. The driver seems to require a new chip select to start each byte. */
  (void)%@SPI@'ModuleName'%.SendChar(cmd);                       %>40/* Bit bang data out MSB first.  Data changes on falling edge and is latched on rising. Clock is inactive low. */
  CHIP_DESELECT_DISPLAY();                                       %>40/* Chip deselect Display */
}

%-INTERNAL_METHOD_END PutCmdCharSPI
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG LoadData
%define! Parindex
%define! Pardata
%define! ParnumBytes
%include Common\GeneralInternalGlobal.inc (LoadData)
static void LoadData(word index, word numBytes, byte *data)
{
  byte colAddr, page;
  word i;

  if (%@EnVcc@'ModuleName'%.GetVal() == 0) {                     %>40/* Enable power to display and reset driver as required. */
  %if %ControlVcc='yes'
    ENABLE_VCC();                                                %>40/* enable power for display */
  %endif
  %if WatchdogEnabled='yes'
    %@Watchdog@'ModuleName'%.Clear();                            %>40/* kick the dog in order not to timeout */
  %endif
    %@Reset@'ModuleName'%.ClrVal();                              %>40/* after every power-enable, Resetpin must pulsing to GND for >20us */
    %@Wait@'ModuleName'%.Waitus(30);
    %@Reset@'ModuleName'%.SetVal();
  }
  for (i = index; i < (index + numBytes); i++) {                 %>40/* Loop through the data to write. */
    colAddr = (byte)(i %% %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS);
    if ((colAddr == 0) || (i == index)) {                        %>40/* Set page and column address as needed. */
      page = (byte)(i/%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS);
      PutCmdCharSPI((byte)((SET_COL_ADD_MSN | (colAddr / 16))));
      PutCmdCharSPI((byte)((SET_COL_ADD_LSN | (colAddr %% 16))));
      PutCmdCharSPI((byte)((SET_PAGE_ADD | page)));
    }
    %@DataCmdPin@'ModuleName'%.SetVal();                         %>40/* Signal that we have a data byte */
    PutDataCharSPI(*data++);                                     %>40/* Write a data byte. */
    %@DataCmdPin@'ModuleName'%.ClrVal();                         %>40/* go back to command mode (default) */
  %if WatchdogEnabled='yes'
    %@Watchdog@'ModuleName'%.Clear();                            %>40/* kick the dog in order not to timeout */
  %endif
  }
}

%-INTERNAL_METHOD_END LoadData
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG RefreshRows
%define! ParfirstDataRow
%define! ParfirstImageRow
%define! ParnumRows
%include Common\GeneralInternalGlobal.inc (RefreshRows)
static void RefreshRows(byte firstDataRow, byte firstImageRow, byte numRows)
{
  byte offset, startLineCmd, i;

  /* Compute image location parameters. */
  offset = (byte)(%Height-firstImageRow);
  startLineCmd = (byte)(%Height+firstDataRow);

  /* Initialization code. */
  PutCmdCharSPI(0xA3);                                           %>40/* Enable bandgap and other analog control. */
  PutCmdCharSPI(0x18);
  PutCmdCharSPI(0xF6);                                           %>40/* Enable oscillator. */
  PutCmdCharSPI(0x40);
  PutCmdCharSPI(0xAE);
  PutCmdCharSPI(0x00);

  /* Initialization code to set dc/dc startup voltage level. */
  PutCmdCharSPI(SET_TC0);                                        %>40/* Set Temp. Comp. Table (9-byte command - see datasheet) */
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0x00);                                           %>40/* View Area Clear Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* View Area Idle  Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* Active Area Clear Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* Active Area Idle  Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* Drive    Duration (Don't Care) */
  PutCmdCharSPI(0x44);                                           %>40/* Clear    Voltage  (Initialize to 25V). */
  PutCmdCharSPI(0x00);                                           %>40/* Drive    Voltage  (Don't Care) */

  /* Set waveform. */
  PutCmdCharSPI(SET_VA_CLR_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip VA Clear. */
  PutCmdCharSPI(SET_IDLE1_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip VA Idle. */
  PutCmdCharSPI(SET_AA_CLR_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip AA Clear. */
  PutCmdCharSPI(SET_IDLE2_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip AA Idle. */
  PutCmdCharSPI(SET_DRIVE_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip Drive. */

  /* Dummy update results in future supply initialization to 25V. */
  PutCmdCharSPI(UPDATE);                                         %>40/* Dummy update. */
  while (%@BusyPin@'ModuleName'%.GetVal()){}                     %>40/* Wait as long the display is busy */

%if WatchdogEnabled='yes'
  %@Watchdog@'ModuleName'%.Clear();                              %>40/* kick the dog in order not to timeout */
%endif
  /* Load temperature compensation data table. */
  for (i = 0; i < sizeof(TC)/sizeof(TC_Table_Element); i++) {
    PutCmdCharSPI((byte)(SET_TC0 + i));                          %>40/* Set Temp. Comp. Table (9-byte command - see datasheet) */
    PutCmdCharSPI(      TC[i].temp);
    PutCmdCharSPI(   TC[i].clearPW);                             %>40/* VA Clear Duration */
    PutCmdCharSPI(   TC[i].drivePW);                             %>40/* VA Idle  Duration */
    PutCmdCharSPI(            0x00);                             %>40/* AA Clear Duration */
    PutCmdCharSPI(            0x00);                             %>40/* AA Idle  Duration */
    PutCmdCharSPI(   TC[i].drivePW);                             %>40/* Drive    Duration */
    PutCmdCharSPI(    TC[i].clearV);                             %>40/* Clear  Voltage */
    PutCmdCharSPI(    TC[i].driveV);                             %>40/* Drive  Voltage */
  %if WatchdogEnabled='yes'
    %@Watchdog@'ModuleName'%.Clear();                            %>40/* kick the dog in order not to timeout */
  %endif
  }

  /* More init. code. */
  PutCmdCharSPI(0xA3);                                           %>40/* Enable other analog control. */
  PutCmdCharSPI(0x1A);
  PutCmdCharSPI(0xE9);                                           %>40/* Enable bias driven. */
  PutCmdCharSPI(0x80);
  PutCmdCharSPI(0x2F);                                           %>40/* Enable booster and high voltage buffer. */
  PutCmdCharSPI(SET_TEMP_CTRL);
  PutCmdCharSPI(TC_ANALOG_ON);                                   %>40/* Enable TC analog block. */

  %@Wait@'ModuleName'%.Waitms(200);                              %>40/* Delay 200 ms (based on 150 ms rise time to 25V w/ Vin = 2.4V). */

  /* Set up update (View Area planar erase and drive scan). */
  PutCmdCharSPI(SET_VA_CLR_RPTS);
  PutCmdCharSPI(0x01);                                           %>40/* View Area Clear Repeats */
  PutCmdCharSPI(SET_IDLE1_RPTS);
  PutCmdCharSPI(0x01);                                           %>40/* View Area Idle  Repeats */
  PutCmdCharSPI(SET_AA_CLR_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Active Area Clear Repeats */
  PutCmdCharSPI(SET_IDLE2_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Active Area Idle  Repeats */
  PutCmdCharSPI(SET_DRIVE_RPTS);
  PutCmdCharSPI(0x01);                                           %>40/* Drive    Repeats */

  PutCmdCharSPI(DRIVE_SCHEME);
  PutCmdCharSPI(0x32);                                           %>40/* drive scheme (ON data) */
  PutCmdCharSPI(TEMP_COMP);
  PutCmdCharSPI(TC_VOLT_TIME);                                   %>40/* enable temp. comp. */

  /* Configure update area. */
  PutCmdCharSPI(SET_MUX);
  PutCmdCharSPI(numRows);                                        %>40/* set MUX ratio */
  PutCmdCharSPI(SET_DISP_OFFSET);
  PutCmdCharSPI(offset);                                         %>40/* set physical location on screen */
  PutCmdCharSPI(startLineCmd);                                   %>40/* controls what data is used */

  /* Drive image content. */
  PutCmdCharSPI(UPDATE);
  while (%@BusyPin@'ModuleName'%.GetVal()){
%if WatchdogEnabled='yes'
  %@Watchdog@'ModuleName'%.Clear();                              %>40/* kick the dog in order not to timeout */
%endif
  }                                                              %>40/* Wait as long the display is busy */

  /* Put display to sleep. */
  PutCmdCharSPI(SET_PWR_CTRL_REG);
  PutCmdCharSPI(0xE9);
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0xF6);
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0xA3);
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0xAB);
  PutCmdCharSPI(0x00);
%if %ControlVcc='yes'
  DISABLE_VCC();                                                 %>40/* Power down display/driver. */
%endif
%if WatchdogEnabled='yes'
  %@Watchdog@'ModuleName'%.Clear();                              %>40/* kick the dog in order not to timeout */
%endif
}

%-INTERNAL_METHOD_END RefreshRows
%-************************************************************************************************************
%-BW_METHOD_BEGIN ElectronicErase
%ifdef ElectronicErase
%include Common\KentChLCDElectronicErase.Inc
void %'ModuleName'%.%ElectronicErase(void)
{
  if (%@EnVcc@'ModuleName'%.GetVal() == 0) {                     %>40/* Enable power to display and reset driver as required. */
  %if %ControlVcc='yes'
    ENABLE_VCC();                                                %>40/* enable power for display */
  %endif
    %@Reset@'ModuleName'%.ClrVal();                              %>40/* after every power-enable, Resetpin must pulsing to GND for >20us */
    %@Wait@'ModuleName'%.Waitus(30);
    %@Reset@'ModuleName'%.SetVal();
  }
  /* Initialization code. */
  PutCmdCharSPI(0xA3);                                           %>40/* Enable bandgap and other analog control. */
  PutCmdCharSPI(0x18);
  PutCmdCharSPI(0xF6);                                           %>40/* Enable oscillator. */
  PutCmdCharSPI(0x40);
  PutCmdCharSPI(0xAE);
  PutCmdCharSPI(0x00);

  /* Initialization code to set dc/dc startup voltage level. */
  PutCmdCharSPI(SET_TC0);                                        %>40/* Set Temp. Comp. Table (9-byte command - see datasheet) */
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0x1F);                                           %>40/* VA Clear Duration (10x) */
  PutCmdCharSPI(0x00);                                           %>40/* VA Idle  Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* AA Clear Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* AA Idle  Duration (Don't Care) */
  PutCmdCharSPI(0x00);                                           %>40/* Drive    Duration (Don't Care) */
  PutCmdCharSPI(0x44);                                           %>40/* Clear    Voltage  (Initialize to 25V). */
  PutCmdCharSPI(0x00);                                           %>40/* Drive    Voltage  (Don't Care) */

  /* Set waveform. */
  PutCmdCharSPI(SET_VA_CLR_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip VA Clear. */
  PutCmdCharSPI(SET_IDLE1_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip VA Idle. */
  PutCmdCharSPI(SET_AA_CLR_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip AA Clear. */
  PutCmdCharSPI(SET_IDLE2_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip AA Idle. */
  PutCmdCharSPI(SET_DRIVE_RPTS);
  PutCmdCharSPI(0x00);                                           %>40/* Skip Drive. */

  /* Dummy update results in future supply initialization to 25V. */
  PutCmdCharSPI(UPDATE);                                         %>40/* Dummy update. */
  while (%@BusyPin@'ModuleName'%.GetVal()){}                     %>40/* Wait as long the display is busy */

  /* More init. code. */
  PutCmdCharSPI(0xA3);                                           %>40/* Enable other analog control. */
  PutCmdCharSPI(0x1A);
  PutCmdCharSPI(0xE9);                                           %>40/* Enable bias driven. */
  PutCmdCharSPI(0x80);
  PutCmdCharSPI(0x2F);                                           %>40/* Enable booster and high voltage buffer. */
  PutCmdCharSPI(SET_TEMP_CTRL);
  PutCmdCharSPI(TC_DISABLE);                                     %>40/* Disable TC analog block. */

  %@Wait@'ModuleName'%.Waitms(200);                              %>40/* Delay 200 ms (based on 150 ms rise time to 25V w/ Vin = 2.4V). */

  /* Set up erase (long VA clear). */
  PutCmdCharSPI(SET_VA_CLR_RPTS);
  PutCmdCharSPI(0x01);                                           %>40/* VA Clear Repeats */

  PutCmdCharSPI(DRIVE_SCHEME);
  PutCmdCharSPI(0x33);                                           %>40/* drive scheme B (ON data) */
  PutCmdCharSPI(TEMP_COMP);
  PutCmdCharSPI(TC_DISABLE);                                     %>40/* enable temp. comp. */

  /* Configure update area. */
  PutCmdCharSPI(SET_MUX);
  PutCmdCharSPI(%Height);                                        %>40/* set MUX ratio (fullscreen) */
  PutCmdCharSPI(SET_DISP_OFFSET);
  PutCmdCharSPI(%Height);                                        %>40/* set physical location on screen */
  PutCmdCharSPI(%Height);                                        %>40/* controls what data is used */

  /* Perform erase */
  PutCmdCharSPI(UPDATE);
  while (%@BusyPin@'ModuleName'%.GetVal()){}                     %>40/* Wait as long the display is busy */

  /* Put display to sleep. */
  PutCmdCharSPI(SET_PWR_CTRL_REG);
  PutCmdCharSPI(0xE9);
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0xF6);
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0xA3);
  PutCmdCharSPI(0x00);
  PutCmdCharSPI(0xAB);
  PutCmdCharSPI(0x00);
%if %ControlVcc='yes'
  DISABLE_VCC();                                                 %>40/* Power down display/driver. */
%endif
}

%endif %- ElectronicErase
%-BW_METHOD_END ElectronicErase
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
%include Common\KentChLCDUpdateFull.Inc
void %'ModuleName'%.%UpdateFull(void)
{
  LoadData(0, sizeof(%'ModuleName'_DisplayBuf), (byte*)%'ModuleName'_DisplayBuf);
  RefreshRows(0, 0, %'ModuleName'%.DISPLAY_HW_NOF_ROWS);
}

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\KentChLCDUpdateRegion.Inc
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h)
{
  byte startRowByte, endRowByte, nofRowBytes;

  (void)w; (void)x; /* not used */
  if (h == 0) { /* nothing to do? */
    return;
  }
  startRowByte = y/8;
  endRowByte = (%'ModuleName'_PixelDim)((y+h-1)/8);
  nofRowBytes = endRowByte-startRowByte+1;

  LoadData(
    startRowByte*%'ModuleName'_DISPLAY_HW_NOF_COLUMNS, /* display RAM address */
    nofRowBytes*%'ModuleName'_DISPLAY_HW_NOF_COLUMNS,  /* number of bytes */
    &%'ModuleName'_DisplayBuf[startRowByte][0]);       /* data */
  /* further optimization potential: right if an update area crosses a byte boundary,
     we transfer at least two lines: we could transfer only one byte and use
     the offset in RefreshRows() (the second argument) to reduce the amount of data sent */
  RefreshRows(y, y, h);
}

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%define! RetVal
%include Common\KentChLCDGetDisplayOrientation.Inc
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void)
{
  return %'ModuleName'%.ORIENTATION_LANDSCAPE;                   %>40/* Landscape mode */
}

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%define! RetVal
%include Common\KentChLCDGetWidth.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%define! RetVal
%include Common\KentChLCDGetHeight.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
%define! RetVal
%include Common\KentChLCDGetShorterSide.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetShorterSide(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
%define! RetVal
%include Common\KentChLCDGetLongerSide.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetLongerSide(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
%define! ParnewOrientation
%include Common\KentChLCDSetDisplayOrientation.Inc
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation)
{
  (void)newOrientation; /* setting the display orientation is not implemented yet */
}

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
%include Common\KentChLCDGetLCD.Inc
void %'ModuleName'%.%GetLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
%define! RetVal
%include Common\KentChLCDGiveLCD.Inc
byte %'ModuleName'%.%GiveLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\KentChLCDInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\KentChLCDDeinit.Inc
byte %'ModuleName'%.%Deinit(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %@DataCmdPin@'ModuleName'%.ClrVal();                           %>40/* we are using command mode as default. */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
