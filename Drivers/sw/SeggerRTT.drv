%include SEGGER_RTT_Files.prg
%-
%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    04.11.2015
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\SeggerRTTSettings.Inc
%define! Abstract Common\SeggerRTTAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

#if %@sdk@'ModuleName'%.SDK_VERSION_USED == %@sdk@'ModuleName'%.SDK_VERSION_NONE
%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
  #include "%'var'.h"
  %endfor
%endif
  #include "%ProcessorModule.h"
#endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "SEGGER_RTT.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%if defined(RTTChannel0Enabled) & %RTTChannel0Enabled='yes'
#define %'ModuleName'%.RTT_CHANNEL_0_ENABLED   1  /* 0: channel disabled, 1: channel enabled */
%else
#define %'ModuleName'%.RTT_CHANNEL_0_ENABLED   0  /* 0: channel disabled, 1: channel enabled */
%endif
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Read
%ifdef Read
#define %'ModuleName'%.%Read(BufferIndex, pBuffer, NumBytes) \
  SEGGER_RTT_Read(BufferIndex, pBuffer, NumBytes)

%define! ParBufferIndex
%define! ParpBuffer
%define! ParBufferSize
%define! RetVal
%include Common\SeggerRTTRead.Inc

%endif %- Read
%-BW_METHOD_END Read
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write
%ifdef Write
#define %'ModuleName'%.%Write(BufferIndex, pBuffer, BufferSize) \
  SEGGER_RTT_Write(BufferIndex, pBuffer, BufferSize)

%define! ParBufferIndex
%define! ParpBuffer
%define! ParBufferSize
%define! RetVal
%include Common\SeggerRTTWrite.Inc

%endif %- Write
%-BW_METHOD_END Write
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
#define %'ModuleName'%.%WriteString(BufferIndex, s) \
  SEGGER_RTT_WriteString(BufferIndex, s)

%define! Pars
%define! ParBufferIndex
%define! RetVal
%include Common\SeggerRTTWriteString.Inc

%endif %- WriteString
%-BW_METHOD_END WriteString
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetKey
%ifdef GetKey
#define %'ModuleName'%.%GetKey() \
  SEGGER_RTT_GetKey()

%define! RetVal
%include Common\SeggerRTTGetKey.Inc

%endif %- GetKey
%-BW_METHOD_END GetKey
%-************************************************************************************************************
%-BW_METHOD_BEGIN WaitKey
%ifdef WaitKey
#define %'ModuleName'%.%WaitKey() \
  SEGGER_RTT_WaitKey()

%define! RetVal
%include Common\SeggerRTTWaitKey.Inc

%endif %- WaitKey
%-BW_METHOD_END WaitKey
%-************************************************************************************************************
%-BW_METHOD_BEGIN HasKey
%ifdef HasKey
#define %'ModuleName'%.%HasKey() \
  SEGGER_RTT_HasKey()

%define! RetVal
%include Common\SeggerRTTHasKey.Inc

%endif %- HasKey
%-BW_METHOD_END HasKey
%-************************************************************************************************************
%-BW_METHOD_BEGIN StdIOKeyPressed
%ifdef StdIOKeyPressed
bool %'ModuleName'%.%StdIOKeyPressed(void);
%define! RetVal
%include Common\SeggerRTTStdIOKeyPressed.Inc

%endif %- StdIOKeyPressed
%-BW_METHOD_END StdIOKeyPressed
%-************************************************************************************************************
%-BW_METHOD_BEGIN StdIOReadChar
%ifdef StdIOReadChar
void %'ModuleName'%.%StdIOReadChar(uint8_t *c);
%define! Parc
%include Common\SeggerRTTStdIOReadChar.Inc

%endif %- StdIOReadChar
%-BW_METHOD_END StdIOReadChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN StdIOSendChar
%ifdef StdIOSendChar
void %'ModuleName'%.%StdIOSendChar(uint8_t ch);
%define! Parch
%include Common\SeggerRTTStdIOSendChar.Inc

%endif %- StdIOSendChar
%-BW_METHOD_END StdIOSendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
uint8_t %'ModuleName'%.%RecvChar(uint8_t *c);
%define! Parc
%define! RetVal
%include Common\SeggerRTTRecvChar.Inc

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
uint8_t %'ModuleName'%.%SendChar(uint8_t ch);
%define! Parch
%define! RetVal
%include Common\SeggerRTTSendChar.Inc

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCharsInRxBuf
%ifdef GetCharsInRxBuf
#define %'ModuleName'%.%GetCharsInRxBuf() \
  SEGGER_RTT_HasKey()

%define! RetVal
%include Common\SeggerRTTGetCharsInRxBuf.Inc

%endif %- GetCharsInRxBuf
%-BW_METHOD_END GetCharsInRxBuf
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);

%include Common\SeggerRTTInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN TerminalOut
%ifdef TerminalOut
#define %'ModuleName'%.%TerminalOut(TerminalId, s) \
  SEGGER_RTT_TerminalOut(TerminalId, s)

%define! ParTerminalId
%define! Pars
%define! RetVal
%include Common\SeggerRTTTerminalOut.Inc

%endif %- TerminalOut
%-BW_METHOD_END TerminalOut
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTerminal
%ifdef SetTerminal
#define %'ModuleName'%.%SetTerminal(TerminalId) \
  SEGGER_RTT_SetTerminal(TerminalId)

%define! ParTerminalId
%define! RetVal
%include Common\SeggerRTTSetTerminal.Inc

%endif %- SetTerminal
%-BW_METHOD_END SetTerminal
%-************************************************************************************************************
%-BW_METHOD_BEGIN ConfigUpBuffer
%ifdef ConfigUpBuffer
#define %'ModuleName'%.%ConfigUpBuffer(BufferIndex, sName, pBuffer, BufferSize, Flags) \
  SEGGER_RTT_ConfigUpBuffer(BufferIndex, sName, pBuffer, BufferSize, Flags)

%define! ParBufferIndex
%define! ParsName
%define! ParpBuffer
%define! ParintBufferSize
%define! ParFlags
%define! RetVal
%include Common\SeggerRTTConfigUpBuffer.Inc

%endif %- ConfigUpBuffer
%-BW_METHOD_END ConfigUpBuffer
%-************************************************************************************************************
%-BW_METHOD_BEGIN ConfigDownBuffer
%ifdef ConfigDownBuffer
#define %'ModuleName'%.%ConfigDownBuffer(BufferIndex, sName, pBuffer, BufferSize, Flags) \
  SEGGER_RTT_ConfigDownBuffer(BufferIndex, sName, pBuffer, BufferSize, Flags)

%define! ParBufferIndex
%define! ParsName
%define! ParpBuffer
%define! ParintBufferSize
%define! ParFlags
%define! RetVal
%include Common\SeggerRTTConfigDownBuffer.Inc

%endif %- ConfigDownBuffer
%-BW_METHOD_END ConfigDownBuffer
%-************************************************************************************************************
%-BW_METHOD_BEGIN printf
%ifdef printf
#define %'ModuleName'%.%printf \
  SEGGER_RTT_printf

%define! ParBufferIndex
%define! ParsFormat
%define! RetVal
%include Common\SeggerRTTprintf.Inc

%endif %- printf
%-BW_METHOD_END printf
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\SeggerRTTSettings.Inc
%define! Abstract Common\SeggerRTTAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Read
%ifdef Read
%define! ParBufferIndex
%define! ParpBuffer
%define! ParBufferSize
%define! RetVal
%include Common\SeggerRTTRead.Inc
/**
int %'ModuleName'%.%Read(unsigned BufferIndex, const char* pBuffer, unsigned NumBytes)
{
  Implemented as macro in the header file.
}
*/

%endif %- Read
%-BW_METHOD_END Read
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write
%ifdef Write
%define! ParBufferIndex
%define! ParpBuffer
%define! ParBufferSize
%define! RetVal
%include Common\SeggerRTTWrite.Inc
/**
int %'ModuleName'%.%Write(unsigned BufferIndex, char* pBuffer, unsigned BufferSize)
{
  Implemented as macro in the header file.
}
*/

%endif %- Write
%-BW_METHOD_END Write
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
%define! Pars
%define! ParBufferIndex
%define! RetVal
%include Common\SeggerRTTWriteString.Inc
/**
unsigned %'ModuleName'%.%WriteString(unsigned BufferIndex, const char* s)
{
  Implemented as macro in the header file.
}
*/

%endif %- WriteString
%-BW_METHOD_END WriteString
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetKey
%ifdef GetKey
%define! RetVal
%include Common\SeggerRTTGetKey.Inc
/**
dword %'ModuleName'%.%GetKey(void)
{
  Implemented as macro in the header file.
}
*/

%endif %- GetKey
%-BW_METHOD_END GetKey
%-************************************************************************************************************
%-BW_METHOD_BEGIN WaitKey
%ifdef WaitKey
%define! RetVal
%include Common\SeggerRTTWaitKey.Inc
/**
long %'ModuleName'%.%WaitKey(void)
{
  Implemented as macro in the header file.
}
*/

%endif %- WaitKey
%-BW_METHOD_END WaitKey
%-************************************************************************************************************
%-BW_METHOD_BEGIN HasKey
%ifdef HasKey
%define! RetVal
%include Common\SeggerRTTHasKey.Inc
/**
long %'ModuleName'%.%HasKey(void)
{
  Implemented as macro in the header file.
}
*/

%endif %- HasKey
%-BW_METHOD_END HasKey
%-************************************************************************************************************
%-BW_METHOD_BEGIN StdIOKeyPressed
%ifdef StdIOKeyPressed
%define! RetVal
%include Common\SeggerRTTStdIOKeyPressed.Inc
bool %'ModuleName'%.%StdIOKeyPressed(void)
{
  return %'ModuleName'%.%HasKey()!=0;
}

%endif %- StdIOKeyPressed
%-BW_METHOD_END StdIOKeyPressed
%-************************************************************************************************************
%-BW_METHOD_BEGIN StdIOReadChar
%ifdef StdIOReadChar
%define! Parc
%include Common\SeggerRTTStdIOReadChar.Inc
void %'ModuleName'%.%StdIOReadChar(uint8_t *c)
{
  int res;

  res = %'ModuleName'%.%GetKey();
  if (res==-1) { /* no character present */
    *c = '\0';
  } else {
    *c = (uint8_t)res; /* return character */
  }
}

%endif %- StdIOReadChar
%-BW_METHOD_END StdIOReadChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN StdIOSendChar
%ifdef StdIOSendChar
%define! Parch
%include Common\SeggerRTTStdIOSendChar.Inc
void %'ModuleName'%.%StdIOSendChar(uint8_t ch)
{
%if BlockingSend='yes'
%if defined(RTTBlockingSendTimeoutMs) & %RTTBlockingSendTimeoutMs >. '0' & defined(WaitTimeMs) & WaitTimeMs >. '0'
  int timeoutMs = %RTTBlockingSendTimeoutMs;

%endif
  for(;;) { /* will break */
    if (%'ModuleName'%.%Write(0, (const char*)&ch, 1)==1) { /* non blocking send, check that we were able to send */
      break; /* was able to send character, get out of waiting loop */
    }
  %if defined(WaitTimeMs) & WaitTimeMs >. '0'
    %@Wait@'ModuleName'%.WaitOSms(%WaitTimeMs);
  %if defined(RTTBlockingSendTimeoutMs) & %RTTBlockingSendTimeoutMs >. '0'
    if(timeoutMs<=0) {
      break; /* timeout */
    }
    timeoutMs -= %WaitTimeMs;
  %endif
  %endif
  } /* for */
%else
  (void)%'ModuleName'%.%Write(0, &ch, 1); /* non blocking send, might loose characters */
%endif
}

%endif %- StdIOSendChar
%-BW_METHOD_END StdIOSendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
%define! Parc
%define! RetVal
%include Common\SeggerRTTRecvChar.Inc
uint8_t %'ModuleName'%.%RecvChar(uint8_t *c)
{
  int res;

  res = %'ModuleName'%.%GetKey();
  if (res==-1) { /* no character present */
    return ERR_RXEMPTY;
  }
  *c = (uint8_t)res; /* return character */
  return ERR_OK;
}

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
%define! Parch
%define! RetVal
%include Common\SeggerRTTSendChar.Inc
uint8_t %'ModuleName'%.%SendChar(uint8_t ch)
{
  int res;

  res = SEGGER_RTT_Write(0, (const char*)&ch, 1);
  if (res!=1) {
    return ERR_TXFULL; /* character not sent? */
  }
  return ERR_OK;
}

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCharsInRxBuf
%ifdef GetCharsInRxBuf
%define! RetVal
%include Common\SeggerRTTGetCharsInRxBuf.Inc
/**
uint16_t %'ModuleName'%.%GetCharsInRxBuf(void)
{
  // Function is implemented as macro in the header file
  if (SEGGER_RTT_HasKey()) {
    return 1; // at least one available
  }
  return 0; // none available
}
*/

%endif %- GetCharsInRxBuf
%-BW_METHOD_END GetCharsInRxBuf
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\SeggerRTTInit.Inc
void %'ModuleName'%.%Init(void)
{
  SEGGER_RTT_Init();
#if %'ModuleName'%.RTT_CHANNEL_0_ENABLED
  (void)%'ModuleName'%.ConfigUpBuffer(0, NULL, NULL, 0, %UpBufferMode);
  (void)%'ModuleName'%.ConfigDownBuffer(0, NULL, NULL, 0, %DownBufferMode);
#endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN TerminalOut
%ifdef TerminalOut
%define! ParTerminalId
%define! Pars
%define! RetVal
%include Common\SeggerRTTTerminalOut.Inc
/**
int %'ModuleName'%.%TerminalOut(char TerminalId, const char* s)
{
  Function is implemented as macro in the header file
}
*/

%endif %- TerminalOut
%-BW_METHOD_END TerminalOut
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTerminal
%ifdef SetTerminal
%define! ParTerminalId
%define! RetVal
%include Common\SeggerRTTSetTerminal.Inc
/**
int %'ModuleName'%.%SetTerminal(char TerminalId)
{
  Function is implemented as macro in the header file
}
*/

%endif %- SetTerminal
%-BW_METHOD_END SetTerminal
%-************************************************************************************************************
%-BW_METHOD_BEGIN ConfigUpBuffer
%ifdef ConfigUpBuffer
%define! ParBufferIndex
%define! ParsName
%define! ParpBuffer
%define! ParintBufferSize
%define! ParFlags
%define! RetVal
%include Common\SeggerRTTConfigUpBuffer.Inc
/**
int %'ModuleName'%.%ConfigUpBuffer(unsigned BufferIndex, const char* sName, char* pBuffer, int BufferSize, int Flags)
{
  Function is implemented as macro in the header file
}
*/

%endif %- ConfigUpBuffer
%-BW_METHOD_END ConfigUpBuffer
%-************************************************************************************************************
%-BW_METHOD_BEGIN ConfigDownBuffer
%ifdef ConfigDownBuffer
%define! ParBufferIndex
%define! ParsName
%define! ParpBuffer
%define! ParintBufferSize
%define! ParFlags
%define! RetVal
%include Common\SeggerRTTConfigDownBuffer.Inc
/**
int %'ModuleName'%.%ConfigDownBuffer(unsigned BufferIndex, const char* sName, char* pBuffer, int BufferSize, int Flags)
{
  Function is implemented as macro in the header file
}
*/

%endif %- ConfigDownBuffer
%-BW_METHOD_END ConfigDownBuffer
%-************************************************************************************************************
%-BW_METHOD_BEGIN printf
%ifdef printf
%define! ParBufferIndex
%define! ParsFormat
%define! RetVal
%include Common\SeggerRTTprintf.Inc
/**
int %'ModuleName'%.%printf(unsigned BufferIndex, const char* sFormat, ...)
{
  Function is implemented as macro in the header file
}
*/

%endif %- printf
%-BW_METHOD_END printf
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
