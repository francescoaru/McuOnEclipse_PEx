%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    03.07.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef ExternalInterrupt
  %ifdef @ExternalInterrupt@OnInterrupt
    %define! Description_%@ExternalInterrupt@OnInterrupt This event is called when an active signal edge/level has occurred. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @ExternalInterrupt@OnInterrupt
%endif %- ExternalInterrupt
%ifdef ExternalInterrupt
  %ifdef @ExternalInterrupt@OnTriggerInterrupt
    %define! Description_%@ExternalInterrupt@OnTriggerInterrupt This event is called when an active signal edge/level has occurred on the supplementary trigger pin. The event is available only if <a href="ExtIntProperties.html#PTE4Int">Supplementary trigger input</a> property is Enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @ExternalInterrupt@OnTriggerInterrupt
%endif %- ExternalInterrupt
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\PCA9554Settings.Inc
%define! Abstract Common\PCA9554Abstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
/* device register addresses */
#define %'ModuleName'%.ADDR_REG_INPUT_PORT      0 /* input port register */
#define %'ModuleName'%.ADDR_REG_OUTPUT_PORT     1 /* output port register */
#define %'ModuleName'%.ADDR_REG_POL_INVERT      2 /* polarity inversion register */
#define %'ModuleName'%.ADDR_REG_CONFIG          3 /* configuration register */
#define %'ModuleName'%.ADDR_MAX_ADDRESS         3 /* maximum addressable register */

%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteI2CByte
%ifdef WriteI2CByte
byte %'ModuleName'%.%WriteI2CByte(byte addr, byte ch);
%define! Paraddr
%define! Parch
%define! RetVal
%include Common\PCA9554WriteI2CByte.Inc

%endif %- WriteI2CByte
%-BW_METHOD_END WriteI2CByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadI2CByte
%ifdef ReadI2CByte
byte %'ModuleName'%.%ReadI2CByte(byte addr, byte *chp);
%define! Paraddr
%define! Parchp
%define! RetVal
%include Common\PCA9554ReadI2CByte.Inc

%endif %- ReadI2CByte
%-BW_METHOD_END ReadI2CByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutputBit
%ifdef SetOutputBit
void %'ModuleName'%.%SetOutputBit(byte bitNo);
%define! ParbitNo
%include Common\PCA9554SetOutputBit.Inc

%endif %- SetOutputBit
%-BW_METHOD_END SetOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearOutputBit
%ifdef ClearOutputBit
void %'ModuleName'%.%ClearOutputBit(byte bitNo);
%define! ParbitNo
%include Common\PCA9554ClearOutputBit.Inc

%endif %- ClearOutputBit
%-BW_METHOD_END ClearOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegOutputBit
%ifdef NegOutputBit
void %'ModuleName'%.%NegOutputBit(byte bitNo);
%define! ParbitNo
%include Common\PCA9554NegOutputBit.Inc

%endif %- NegOutputBit
%-BW_METHOD_END NegOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteOutput
%ifdef WriteOutput
void %'ModuleName'%.%WriteOutput(byte val);
%define! Parval
%include Common\PCA9554WriteOutput.Inc

%endif %- WriteOutput
%-BW_METHOD_END WriteOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadOutput
%ifdef ReadOutput
byte %'ModuleName'%.%ReadOutput(void);
%define! RetVal
%include Common\PCA9554ReadOutput.Inc

%endif %- ReadOutput
%-BW_METHOD_END ReadOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadInput
%ifdef ReadInput
byte %'ModuleName'%.%ReadInput(void);
%define! RetVal
%include Common\PCA9554ReadInput.Inc

%endif %- ReadInput
%-BW_METHOD_END ReadInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadInputBit
%ifdef ReadInputBit
byte %'ModuleName'%.%ReadInputBit(byte bitNo);
%define! ParbitNo
%define! RetVal
%include Common\PCA9554ReadInputBit.Inc

%endif %- ReadInputBit
%-BW_METHOD_END ReadInputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetOutputBit
%ifdef GetOutputBit
byte %'ModuleName'%.%GetOutputBit(byte bitNo);
%define! ParbitNo
%define! RetVal
%include Common\PCA9554GetOutputBit.Inc

%endif %- GetOutputBit
%-BW_METHOD_END GetOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadPolarityInversion
%ifdef ReadPolarityInversion
byte %'ModuleName'%.%ReadPolarityInversion(void);
%define! RetVal
%include Common\PCA9554ReadPolarityInversion.Inc

%endif %- ReadPolarityInversion
%-BW_METHOD_END ReadPolarityInversion
%-************************************************************************************************************
%-BW_METHOD_BEGIN WritePolarityInversion
%ifdef WritePolarityInversion
void %'ModuleName'%.%WritePolarityInversion(byte val);
%define! Parval
%include Common\PCA9554WritePolarityInversion.Inc

%endif %- WritePolarityInversion
%-BW_METHOD_END WritePolarityInversion
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadConfig
%ifdef ReadConfig
byte %'ModuleName'%.%ReadConfig(void);
%define! RetVal
%include Common\PCA9554ReadConfig.Inc

%endif %- ReadConfig
%-BW_METHOD_END ReadConfig
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteConfig
%ifdef WriteConfig
byte %'ModuleName'%.%WriteConfig(byte val);
%define! Parval
%define! RetVal
%include Common\PCA9554WriteConfig.Inc

%endif %- WriteConfig
%-BW_METHOD_END WriteConfig
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetAddress
%ifdef SetAddress
void %'ModuleName'%.%SetAddress(byte addr);
%define! Paraddr
%include Common\PCA9554SetAddress.Inc

%endif %- SetAddress
%-BW_METHOD_END SetAddress
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetAddress
%ifdef GetAddress
byte %'ModuleName'%.%GetAddress(void);
%define! RetVal
%include Common\PCA9554GetAddress.Inc

%endif %- GetAddress
%-BW_METHOD_END GetAddress
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN ExternalInterrupt OnInterrupt
%if %usingExternalInterrupt = 'yes'
%ifdef @ExternalInterrupt@OnInterrupt
void %@ExternalInterrupt@OnInterrupt(void);

%endif %- @ExternalInterrupt@OnInterrupt
%endif %- usingExternalInterrupt
%-INHERITED_EVENT_END ExternalInterrupt OnInterrupt
%-INHERITED_EVENT_BEGIN ExternalInterrupt OnTriggerInterrupt
%if %usingExternalInterrupt = 'yes'
%ifdef @ExternalInterrupt@OnTriggerInterrupt
void %@ExternalInterrupt@OnTriggerInterrupt(void);

%endif %- @ExternalInterrupt@OnTriggerInterrupt
%endif %- usingExternalInterrupt
%-INHERITED_EVENT_END ExternalInterrupt OnTriggerInterrupt
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnInterrupt
%ifdef OnInterrupt
%INTERFACE OnInterrupt
void %OnInterrupt(void);
%include Common\PCA9554OnInterrupt.Inc

%endif %- OnInterrupt
%-BW_METHOD_END OnInterrupt
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\PCA9554Settings.Inc
%define! Abstract Common\PCA9554Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
/* depending on the device type, the address is different */
#define %'ModuleName'%.DEVICE_BASE_ADDRESS_PCA9554      0x20 /* I2C device base address for PCA9554, will be shifted by one on the bus! */
#define %'ModuleName'%.DEVICE_BASE_ADDRESS_PCA9554A     0x38 /* I2C device base address for PCA9554A, will be shifted by one on the bus! */
%if %Device = 'PCA9554'
#define %'ModuleName'%.DEVICE_BASE_ADDRESS              %'ModuleName'%.DEVICE_BASE_ADDRESS_PCA9554 /* we are a PCA9554 */
%elif %Device = 'PCA9554A'
#define %'ModuleName'%.DEVICE_BASE_ADDRESS              %'ModuleName'%.DEVICE_BASE_ADDRESS_PCA9554A /* we are a PCA9554A */
%else
  #error "unknown device type %Device!"
%endif
/* I2C address bits formed by pins A0, A1 and A2, as set in the properties */
#define %'ModuleName'%.DEVICE_I2C_ADDR_PIN_BITS   (%I2CAddress) /* address of the device, defined by A0, A1 and A3 pins, will be shifted by one on the bus! */

/* current I2C address of the device: */
%if defined(SetAddress)
static uint8_t %'ModuleName'%.I2C_ADDR = (%'ModuleName'%.DEVICE_BASE_ADDRESS)|(%'ModuleName'%.DEVICE_I2C_ADDR_PIN_BITS);
%else
#define %'ModuleName'%.I2C_ADDR          (%'ModuleName'%.DEVICE_BASE_ADDRESS)|(%'ModuleName'%.DEVICE_I2C_ADDR_PIN_BITS)
%endif

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteI2CByte
%ifdef WriteI2CByte
%define! Paraddr
%define! Parch
%define! RetVal
%include Common\PCA9554WriteI2CByte.Inc
byte %'ModuleName'%.%WriteI2CByte(byte addr, byte ch)
{
  uint8_t res;

  if (addr > %'ModuleName'%.ADDR_MAX_ADDRESS) {
    return ERR_RANGE;
  }
  res = %@SWI2C@'ModuleName'%.WriteAddress(%'ModuleName'%.I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &ch, sizeof(ch));
  if (res!=ERR_OK) {
    return res;
  }
  return ERR_OK;
}

%endif %- WriteI2CByte
%-BW_METHOD_END WriteI2CByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadI2CByte
%ifdef ReadI2CByte
%define! Paraddr
%define! Parchp
%define! RetVal
%include Common\PCA9554ReadI2CByte.Inc
byte %'ModuleName'%.%ReadI2CByte(byte addr, byte *chp)
{
  if (addr > %'ModuleName'%.ADDR_MAX_ADDRESS) {
    return ERR_RANGE;
  }
  return %@SWI2C@'ModuleName'%.ReadAddress(%'ModuleName'%.I2C_ADDR, (uint8_t*)&addr, sizeof(addr), chp, 1);
}

%endif %- ReadI2CByte
%-BW_METHOD_END ReadI2CByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadOutput
%ifdef ReadOutput
%define! RetVal
%include Common\PCA9554ReadOutput.Inc
byte %'ModuleName'%.%ReadOutput(void)
{
  uint8_t val;

  (void)%'ModuleName'%.%ReadI2CByte(%'ModuleName'%.ADDR_REG_OUTPUT_PORT, &val); /* read current output value */
  return val;
}

%endif %- ReadOutput
%-BW_METHOD_END ReadOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteOutput
%ifdef WriteOutput
%define! Parval
%include Common\PCA9554WriteOutput.Inc
void %'ModuleName'%.%WriteOutput(byte val)
{
  (void)%'ModuleName'%.%WriteI2CByte(%'ModuleName'%.ADDR_REG_OUTPUT_PORT, val);
}

%endif %- WriteOutput
%-BW_METHOD_END WriteOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetOutputBit
%ifdef GetOutputBit
%define! ParbitNo
%define! RetVal
%include Common\PCA9554GetOutputBit.Inc
byte %'ModuleName'%.%GetOutputBit(byte bitNo)
{
  return (uint8_t)(%'ModuleName'%.%ReadOutput()&(uint8_t)(1<<bitNo));
}

%endif %- GetOutputBit
%-BW_METHOD_END GetOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutputBit
%ifdef SetOutputBit
%define! ParbitNo
%include Common\PCA9554SetOutputBit.Inc
void %'ModuleName'%.%SetOutputBit(byte bitNo)
{
  %'ModuleName'%.%WriteOutput(%'ModuleName'%.%ReadOutput()|(uint8_t)(1<<bitNo)); /* write new output value */
}

%endif %- SetOutputBit
%-BW_METHOD_END SetOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearOutputBit
%ifdef ClearOutputBit
%define! ParbitNo
%include Common\PCA9554ClearOutputBit.Inc
void %'ModuleName'%.%ClearOutputBit(byte bitNo)
{
  (void)%'ModuleName'%.%WriteOutput((uint8_t)(%'ModuleName'%.%ReadOutput()&(uint8_t)(~(uint8_t)(1<<bitNo)))); /* write new output value */
}

%endif %- ClearOutputBit
%-BW_METHOD_END ClearOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegOutputBit
%ifdef NegOutputBit
%define! ParbitNo
%include Common\PCA9554NegOutputBit.Inc
void %'ModuleName'%.%NegOutputBit(byte bitNo)
{
  %'ModuleName'%.%WriteOutput(%'ModuleName'%.%ReadOutput()^(uint8_t)(1<<bitNo)); /* write new output value */
}

%endif %- NegOutputBit
%-BW_METHOD_END NegOutputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadInput
%ifdef ReadInput
%define! RetVal
%include Common\PCA9554ReadInput.Inc
byte %'ModuleName'%.%ReadInput(void)
{
  uint8_t val;

  (void)%'ModuleName'%.%ReadI2CByte(%'ModuleName'%.ADDR_REG_INPUT_PORT, &val); /* read current input value */
  return val;
}

%endif %- ReadInput
%-BW_METHOD_END ReadInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadInputBit
%ifdef ReadInputBit
%define! ParbitNo
%define! RetVal
%include Common\PCA9554ReadInputBit.Inc
byte %'ModuleName'%.%ReadInputBit(byte bitNo)
{
  return (uint8_t)(%'ModuleName'%.%ReadInput()&(uint8_t)(1<<bitNo));
}

%endif %- ReadInputBit
%-BW_METHOD_END ReadInputBit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadPolarityInversion
%ifdef ReadPolarityInversion
%define! RetVal
%include Common\PCA9554ReadPolarityInversion.Inc
byte %'ModuleName'%.%ReadPolarityInversion(void)
{
  uint8_t val;

  (void)%'ModuleName'%.%ReadI2CByte(%'ModuleName'%.ADDR_REG_POL_INVERT, &val);
  return val;
}

%endif %- ReadPolarityInversion
%-BW_METHOD_END ReadPolarityInversion
%-************************************************************************************************************
%-BW_METHOD_BEGIN WritePolarityInversion
%ifdef WritePolarityInversion
%define! Parval
%include Common\PCA9554WritePolarityInversion.Inc
void %'ModuleName'%.%WritePolarityInversion(byte val)
{
  (void)%'ModuleName'%.%WriteI2CByte(%'ModuleName'%.ADDR_REG_POL_INVERT, val);
}

%endif %- WritePolarityInversion
%-BW_METHOD_END WritePolarityInversion
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadConfig
%ifdef ReadConfig
%define! RetVal
%include Common\PCA9554ReadConfig.Inc
byte %'ModuleName'%.%ReadConfig(void)
{
  uint8_t val;

  (void)%'ModuleName'%.%ReadI2CByte(%'ModuleName'%.ADDR_REG_CONFIG, &val);
  return val;
}

%endif %- ReadConfig
%-BW_METHOD_END ReadConfig
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteConfig
%ifdef WriteConfig
%define! Parval
%define! RetVal
%include Common\PCA9554WriteConfig.Inc
byte %'ModuleName'%.%WriteConfig(byte val)
{
  return %'ModuleName'%.%WriteI2CByte(%'ModuleName'%.ADDR_REG_CONFIG, val);
}

%endif %- WriteConfig
%-BW_METHOD_END WriteConfig
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetAddress
%ifdef SetAddress
%define! Paraddr
%include Common\PCA9554SetAddress.Inc
void %'ModuleName'%.%SetAddress(byte addr)
{
  %'ModuleName'%.I2C_ADDR = addr; /* store the address */
}

%endif %- SetAddress
%-BW_METHOD_END SetAddress
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetAddress
%ifdef GetAddress
%define! RetVal
%include Common\PCA9554GetAddress.Inc
byte %'ModuleName'%.%GetAddress(void)
{
  return %'ModuleName'%.I2C_ADDR; /* return the current I2C address */
}

%endif %- GetAddress
%-BW_METHOD_END GetAddress
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN ExternalInterrupt OnInterrupt
%if %usingExternalInterrupt = 'yes'
%ifdef @ExternalInterrupt@OnInterrupt
%include Common\GeneralInternal.inc (OnInterrupt)
void %@ExternalInterrupt@OnInterrupt(void)
{
  %OnInterrupt();
}

%endif %- @ExternalInterrupt@OnInterrupt
%endif %- usingExternalInterrupt
%-INHERITED_EVENT_END ExternalInterrupt OnInterrupt
%-INHERITED_EVENT_BEGIN ExternalInterrupt OnTriggerInterrupt
%if %usingExternalInterrupt = 'yes'
%ifdef @ExternalInterrupt@OnTriggerInterrupt
%include Common\GeneralInternal.inc (OnTriggerInterrupt)
void %@ExternalInterrupt@OnTriggerInterrupt(void)
{
  /* Write your code here ... */
}

%endif %- @ExternalInterrupt@OnTriggerInterrupt
%endif %- usingExternalInterrupt
%-INHERITED_EVENT_END ExternalInterrupt OnTriggerInterrupt
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnInterrupt
%ifdef OnInterrupt
%IMPLEMENTATION OnInterrupt
%include Common\PCA9554OnInterrupt.Inc
void %OnInterrupt(void)
{
  /* Write your code here ... */
}

%endif %- OnInterrupt
%-BW_METHOD_END OnInterrupt
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
