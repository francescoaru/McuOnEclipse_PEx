%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    03.02.2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\CriticalSectionSettings.Inc
%define! Abstract Common\CriticalSectionAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

#if %@sdk@'ModuleName'%.SDK_VERSION_USED == %@sdk@'ModuleName'%.SDK_VERSION_NONE
%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
  #include "%'var'.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
  #include "%ProcessorModule.h"
#endif
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%if (%useRTOScritical='yes')
#include "FreeRTOS.h"

%endif
/* workaround macros for wrong EnterCritical()/ExitCritical() in the low level drivers. Will be removed once PEx is fixed */
#define %'ModuleName'%.CriticalVariableDrv() \
  %'ModuleName'%.%CriticalVariable()
#define %'ModuleName'%.EnterCriticalDrv() \
  %'ModuleName'%.%EnterCritical()
#define %'ModuleName'%.ExitCriticalDrv() \
  %'ModuleName'%.%ExitCritical()

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CriticalVariable
%ifdef CriticalVariable
#define %'ModuleName'%.%CriticalVariable() \
%if (%useRTOScritical='yes')
  /* nothing needed */
%elif (%UseProcessorExpertDefault='no') & (CPUfamily = "Kinetis") & (%Compiler = "GNUC")
  uint8_t cpuSR; /* variable to store current status */
%else
  /* nothing needed */
%endif

%include Common\CriticalSectionCriticalVariable.Inc

%endif %- CriticalVariable
%-BW_METHOD_END CriticalVariable
%-************************************************************************************************************
%-BW_METHOD_BEGIN EnterCritical
%ifdef EnterCritical
#define %'ModuleName'%.%EnterCritical() \
%if (%useRTOScritical='yes')
  taskENTER_CRITICAL()
%elif (%UseProcessorExpertDefault='no') & (%CPUfamily = "Kinetis") & (%Compiler = "GNUC")
  do {                                  \
    /*lint -save  -esym(529,cpuSR) Symbol 'cpuSR' not subsequently referenced. */\
    __asm (                             \
    "mrs   r0, PRIMASK     \n\t"        \
    "cpsid i               \n\t"        \
    "strb r0, %%[output]   \n\t"         \
    : [output] "=m" (cpuSR) :: "r0");   \
    __asm ("" ::: "memory");            \
    /*lint -restore Symbol 'cpuSR' not subsequently referenced. */\
  } while(0)
%else
  EnterCritical()
%endif

%include Common\CriticalSectionEnterCritical.Inc

%endif %- EnterCritical
%-BW_METHOD_END EnterCritical
%-************************************************************************************************************
%-BW_METHOD_BEGIN ExitCritical
%ifdef ExitCritical
#define %'ModuleName'%.%ExitCritical() \
%if (%useRTOScritical='yes')
  taskEXIT_CRITICAL()
%elif (%UseProcessorExpertDefault='no') & (%CPUfamily = "Kinetis") & (%Compiler = "GNUC")
  do{                                  \
    __asm (                            \
    "ldrb r0, %%[input]    \n\t"        \
    "msr PRIMASK,r0        \n\t"       \
    ::[input] "m" (cpuSR) : "r0");     \
  } while(0)
%else
  ExitCritical()
%endif

%include Common\CriticalSectionExitCritical.Inc

%endif %- ExitCritical
%-BW_METHOD_END ExitCritical
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\CriticalSectionSettings.Inc
%define! Abstract Common\CriticalSectionAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CriticalVariable
%ifdef CriticalVariable
%include Common\CriticalSectionCriticalVariable.Inc
/*
void %'ModuleName'%.%CriticalVariable(void)
{
  *** Implemented as macro in the header file %'ModuleName'.h
}
*/

%endif %- CriticalVariable
%-BW_METHOD_END CriticalVariable
%-************************************************************************************************************
%-BW_METHOD_BEGIN EnterCritical
%ifdef EnterCritical
%include Common\CriticalSectionEnterCritical.Inc
/*
void %'ModuleName'%.%EnterCritical(void)
{
  *** Implemented as macro in the header file %'ModuleName'.h
}
*/

%endif %- EnterCritical
%-BW_METHOD_END EnterCritical
%-************************************************************************************************************
%-BW_METHOD_BEGIN ExitCritical
%ifdef ExitCritical
%include Common\CriticalSectionExitCritical.Inc
/*
void %'ModuleName'%.%ExitCritical(void)
{
  *** Implemented as macro in the header file %'ModuleName'.h
}
*/

%endif %- ExitCritical
%-BW_METHOD_END ExitCritical
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
