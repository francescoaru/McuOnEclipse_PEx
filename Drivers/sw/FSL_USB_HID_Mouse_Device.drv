%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    13.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_App_Callback Method to handle class callbacks from USB
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%- copy files
%include FSL_USB_HID_Mouse_Device_Files.prg
%-
%-
%INTERFACE
%define! Settings Common\FSL_USB_HID_Mouse_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_HID_Mouse_DeviceAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for size_t */
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

/* error/event codes for events */
#define %'ModuleName'%.USB_ERR_INIT            1  /* USB initialization error */
#define %'ModuleName'%.USB_ERR_DEINIT          2  /* USB deinitialization error */

/* bits for the first byte (action) of the update message */
#define %'ModuleName'%.MOUSE_LEFT    (1<<0)
#define %'ModuleName'%.MOUSE_RIGHT   (1<<1)
#define %'ModuleName'%.MOUSE_MIDDLE  (1<<2)

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
byte %'ModuleName'%.%Init(void);
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
byte %'ModuleName'%.%App_Task(void);
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceApp_Task.Inc

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_App_Callback
%ifdef USB_App_Callback
void %'ModuleName'%.%USB_App_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_HID_Mouse_DeviceUSB_App_Callback.Inc

%endif %- USB_App_Callback
%-BW_METHOD_END USB_App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_Notify_Callback
%ifdef USB_Notify_Callback
void %'ModuleName'%.%USB_Notify_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_HID_Mouse_DeviceUSB_Notify_Callback.Inc

%endif %- USB_Notify_Callback
%-BW_METHOD_END USB_Notify_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Notify_Callback
%ifdef Notify_Callback
void %'ModuleName'%.%Notify_Callback(byte request, word value, word wIndex, byte** data, USB_PACKET_SIZE* size);
%define! Parrequest
%define! Parvalue
%define! ParwIndex
%define! Pardata
%define! Parsize
%include Common\FSL_USB_HID_Mouse_DeviceNotify_Callback.Inc

%endif %- Notify_Callback
%-BW_METHOD_END Notify_Callback
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
void %'ModuleName'%.App_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
bool %'ModuleName'%.%isEnumerated(void);
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceisEnumerated.Inc

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-************************************************************************************************************
%-BW_METHOD_BEGIN Send
%ifdef Send
byte %'ModuleName'%.%Send(byte action, signed char x, signed char y);
%define! Paraction
%define! Parx
%define! Pary
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceSend.Inc

%endif %- Send
%-BW_METHOD_END Send
%-************************************************************************************************************
%-BW_METHOD_BEGIN Move
%ifdef Move
byte %'ModuleName'%.%Move(signed char x, signed char y);
%define! Parx
%define! Pary
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceMove.Inc

%endif %- Move
%-BW_METHOD_END Move
%-************************************************************************************************************
%-BW_METHOD_BEGIN Click
%ifdef Click
byte %'ModuleName'%.%Click(byte buttonMask);
%define! ParbuttonMask
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceClick.Inc

%endif %- Click
%-BW_METHOD_END Click
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
byte %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(byte error);
%define! Parerror
%include Common\FSL_USB_HID_Mouse_DeviceOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FSL_USB_HID_Mouse_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_HID_Mouse_DeviceAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include "hidef.h"          /* for EnableInterrupts macro */
#include "derivative.h"     /* include peripheral declarations */
#include "types.h"          /* Contains User Defined Data Types */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "usb_hid.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define  CONTROLLER_ID     (0)   /* ID to identify USB CONTROLLER */

#define  MOUSE_BUFF_SIZE   (%HIDMouseMsgSize)   /* report buffer size, number of bytes in message, specified in component properties */
#define  REQ_DATA_SIZE     (1)

#if (MOUSE_BUFF_SIZE<4) || (MOUSE_BUFF_SIZE>5)
  #error "Only buffer size of 4 or 5 supported!"
#endif

static uint_8 rpt_buf[MOUSE_BUFF_SIZE];     /* Mouse Event Report Buffer Key press */
static uint_8 g_app_request_params[2];      /* for get/set idle and protocol requests*/
static volatile boolean transactionOngoing = FALSE; /* flag to know if a transaction is currently ongoing */
static volatile bool mouse_init = FALSE; /* flag to indicate if mouse is enumerated */
/******************************************************************************
 *
 *    @name        USB_App_Param_Callback
 *
 *    @brief       This function handles callbacks for USB HID Class request
 *
 *    @param       request  : request type
 *    @param       value    : give report type and id
 *    @param       data     : pointer to the data
 *    @param       size     : size of the transfer
 *
 *    @return      status
 *                 USB_OK  :  if successful
 *                 else return error
 *
 *****************************************************************************
 * This function is called whenever a HID class request is received. This
 * function handles these class requests
 *****************************************************************************/
uint_8 USB_App_Param_Callback(
      uint_8 request,        /* [IN] request type */
      uint_16 value,         /* [IN] report type and ID */
      uint_16 wIndex,                 /* [IN] interface*/
      uint_8_ptr* data,      /* [OUT] pointer to the data */
      USB_PACKET_SIZE* size  /* [OUT] size of the transfer */
)
{
  uint_8 status = USB_OK;
  uint_8 index = (uint_8)((request - 2) & USB_HID_REQUEST_TYPE_MASK);
                                         /* index == 0 for get/set idle,
                                            index == 1 for get/set protocol */

  (void)wIndex; /* unused parameter */
  *size = 0;
  /* handle the class request */
  switch(request) {
    case USB_HID_GET_REPORT_REQUEST :
      *data = &rpt_buf[0]; /* point to the report to send */
      *size = MOUSE_BUFF_SIZE; /* report size */
      break;

     case USB_HID_SET_REPORT_REQUEST :
       for(index = 0; index < MOUSE_BUFF_SIZE ; index++)
       {   /* copy the report sent by the host */
         rpt_buf[index] = *(*data + index);
       }
       break;

      case USB_HID_GET_IDLE_REQUEST :
        /* point to the current idle rate */
        *data = &g_app_request_params[index];
        *size = REQ_DATA_SIZE;
        break;

      case USB_HID_SET_IDLE_REQUEST :
        /* set the idle rate sent by the host */
        g_app_request_params[index] =(uint_8)((value & MSB_MASK) >> HIGH_BYTE_SHIFT);
        break;

      case USB_HID_GET_PROTOCOL_REQUEST :
        /* point to the current protocol code
           0 = Boot Protocol
           1 = Report Protocol*/
        *data = &g_app_request_params[index];
        *size = REQ_DATA_SIZE;
        break;

      case USB_HID_SET_PROTOCOL_REQUEST :
        /* set the protocol sent by the host
           0 = Boot Protocol
           1 = Report Protocol*/
        g_app_request_params[index] = (uint_8)(value);
        break;
  }
  return status;
}
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)
void %'ModuleName'%.App_Callback(byte controller_ID, byte event_type, void *val)
{
  UNUSED(controller_ID)
  UNUSED(val)
  if((event_type == USB_APP_BUS_RESET) || (event_type == USB_APP_CONFIG_CHANGED)) {
    mouse_init = FALSE;
  } else if(event_type == USB_APP_ENUM_COMPLETE) {
    /* if enumeration is complete set mouse_init so that application can start */
    mouse_init = TRUE;
  } else if (event_type==USB_APP_SEND_COMPLETE && mouse_init) {
    transactionOngoing = FALSE;
  }
}

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceApp_Task.Inc
byte %'ModuleName'%.%App_Task(void)
{
  uint32_t hidCode; /* upper 8bits are modifier, lower 8bits are hid code value */

  /* device is %CPUDevice */
%if (CPUDevice="MC9S08JE128") | (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60") | (CPUDevice="MC9S08JS16") | (CPUDevice="MC9S08MM128")
  if (USB_PROCESS_PENDING()) { /* doing this only for MC9S08JE128, MC9S08JM16, MC9S08JM60, MC9S08JS16 and MC9S08MM128 */
    USB_Engine();
  }
%endif
  USB_Class_HID_Periodic_Task(); /* call the periodic task function */
  if (!mouse_init) {
    return ERR_BUSOFF; /* bus not available, device not enumerated */
  }
  while (%@TxBuffer@'ModuleName'%.Get(&hidCode)==ERR_OK) { /* send everything in the queue */
    /* send message */
    #if MOUSE_BUFF_SIZE==4
    rpt_buf[0] = (hidCode>>24)&0xFF; /* button information */
    rpt_buf[1] = (hidCode>>16)&0xFF; /* x */
    rpt_buf[2] = (hidCode>>8)&0xFF; /* y */
    rpt_buf[3] = hidCode&0xFF;
    #else
      #error "NYI"
    /*! \todo */
    #endif
    transactionOngoing = TRUE;
    if (USB_Class_HID_Send_Data(CONTROLLER_ID, HID_ENDPOINT, rpt_buf, sizeof(rpt_buf))!=USB_OK) {
      transactionOngoing = FALSE;
      return ERR_FAILED;
    }
    while(transactionOngoing) {
      /* wait until we send the next transaction */
%if (CPUDevice="MC9S08JE128") | (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60") | (CPUDevice="MC9S08JS16") | (CPUDevice="MC9S08MM128")
      if (USB_PROCESS_PENDING()) { /* doing this only for MC9S08JE128, MC9S08JM16, MC9S08JM60, MC9S08JS16 and MC9S08MM128 */
        USB_Engine();
      }
%endif
    }
  } /* while */
  return ERR_OK;
}

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceDeinit.Inc
byte %'ModuleName'%.%Deinit(void)
{
  byte err;

  err = USB_Class_HID_DeInit(CONTROLLER_ID);
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_DEINIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceInit.Inc
byte %'ModuleName'%.%Init(void)
{
  byte err;

  err = USB_Class_HID_Init(CONTROLLER_ID, %'ModuleName'%.App_Callback, NULL, USB_App_Param_Callback);
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_INIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceisEnumerated.Inc
bool %'ModuleName'%.%isEnumerated(void)
{
  return mouse_init;
}

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-************************************************************************************************************
%-BW_METHOD_BEGIN Send
%ifdef Send
%define! Paraction
%define! Parx
%define! Pary
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceSend.Inc
byte %'ModuleName'%.%Send(byte action, signed char x, signed char y)
{
  uint8_t status;

  if (!mouse_init) {
    return ERR_FAILED;
  }
  rpt_buf[0] = action;
  rpt_buf[1] = (uint8_t)x;
  rpt_buf[2] = (uint8_t)y;
#if MOUSE_BUFF_SIZE==4
  rpt_buf[3] = 0;
#elif MOUSE_BUFF_SIZE==5
  rpt_buf[3] = 0;
  rpt_buf[4] = 0;
#endif
  status = USB_Class_HID_Send_Data(CONTROLLER_ID,HID_ENDPOINT, rpt_buf, sizeof(rpt_buf));
  if (status != USB_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Send
%-BW_METHOD_END Send
%-************************************************************************************************************
%-BW_METHOD_BEGIN Move
%ifdef Move
%define! Parx
%define! Pary
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceMove.Inc
byte %'ModuleName'%.%Move(signed char x, signed char y)
{
  union {
   uint8_t bytes[4]; /*! \todo */
   uint32_t val;
  } u;

  u.val = 0;
  u.bytes[1] = x;
  u.bytes[2] = y;
  return %@TxBuffer@'ModuleName'%.Put(u.val);
}

%endif %- Move
%-BW_METHOD_END Move
%-************************************************************************************************************
%-BW_METHOD_BEGIN Click
%ifdef Click
%define! ParbuttonMask
%define! RetVal
%include Common\FSL_USB_HID_Mouse_DeviceClick.Inc
byte %'ModuleName'%.%Click(byte buttonMask)
{
  if (%@TxBuffer@'ModuleName'%.Put(((%@TxBuffer@'ModuleName'%.ElementType)buttonMask)<<24)!=ERR_OK) { /* put 32bit value into buffer */
    return ERR_FAILED;
  }
  return (%@TxBuffer@'ModuleName'%.Put(0)!=ERR_OK); /* send release message */
}

%endif %- Click
%-BW_METHOD_END Click
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parerror
%include Common\FSL_USB_HID_Mouse_DeviceOnEvent.Inc
void %OnEvent(byte error)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
