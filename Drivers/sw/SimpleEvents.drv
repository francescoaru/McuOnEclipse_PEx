%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    18.08.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_Init Initialization method.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\SimpleEventsSettings.Inc
%define! Abstract Common\SimpleEventsAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

#if %@sdk@'ModuleName'%.SDK_VERSION_USED == %@sdk@'ModuleName'%.SDK_VERSION_NONE
%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
  #include "%'var'.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
  #include "%ProcessorModule.h"
#else
  /* event handler */
  void EVNT1_AppHandleEvent(uint8_t event);
#endif

#ifdef __cplusplus
extern "C" {
#endif

/*! List of events */
%for i from EventNameList
#define %'ModuleName'%.%i                                        %>40 %for_index_0
%endfor

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetEvent
%ifdef SetEvent
void %'ModuleName'%.%SetEvent(uint8_t event);
%define! Parevent
%include Common\SimpleEventsSetEvent.Inc

%endif %- SetEvent
%-BW_METHOD_END SetEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN HandleEvent
%ifdef HandleEvent
void %'ModuleName'%.%HandleEvent(void);
%include Common\SimpleEventsHandleEvent.Inc

%endif %- HandleEvent
%-BW_METHOD_END HandleEvent
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
void %'ModuleName'%.Init(void);
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetEvent
%ifdef GetEvent
bool %'ModuleName'%.%GetEvent(uint8_t event);
%define! Parevent
%define! RetVal
%include Common\SimpleEventsGetEvent.Inc

%endif %- GetEvent
%-BW_METHOD_END GetEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearEvent
%ifdef ClearEvent
void %'ModuleName'%.%ClearEvent(uint8_t event);
%define! Parevent
%include Common\SimpleEventsClearEvent.Inc

%endif %- ClearEvent
%-BW_METHOD_END ClearEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN EventsPending
%ifdef EventsPending
bool %'ModuleName'%.%EventsPending(void);
%define! RetVal
%include Common\SimpleEventsEventsPending.Inc

%endif %- EventsPending
%-BW_METHOD_END EventsPending
#ifdef __cplusplus
}  /* extern "C" */
#endif
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetClearEvent
%ifdef GetClearEvent
bool %'ModuleName'%.%GetClearEvent(uint8_t event);
%define! Parevent
%define! RetVal
%include Common\SimpleEventsGetClearEvent.Inc

%endif %- GetClearEvent
%-BW_METHOD_END GetClearEvent
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN AppHandleEvent
%ifdef AppHandleEvent
%INTERFACE AppHandleEvent
void %AppHandleEvent(uint8_t event);
%define! Parevent
%include Common\SimpleEventsAppHandleEvent.Inc

%endif %- AppHandleEvent
%-BW_METHOD_END AppHandleEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\SimpleEventsSettings.Inc
%define! Abstract Common\SimpleEventsAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */
#include "%'ModuleName'.h"
#if %@sdk@'ModuleName'%.SDK_VERSION_USED == %@sdk@'ModuleName'%.SDK_VERSION_NONE
%for var from EventModules
  #include "%var.h"
%endfor
#endif

%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%define NumOfEvents %EventNameListLines
#define %'ModuleName'%.NOF_EVENTS  %EventNameListLines           %>40 /*!< Number of events supported */
static uint8_t %'ModuleName'%.Events[((%'ModuleName'%.NOF_EVENTS-1)/8)+1];%>40 /*!< Bit set of events */
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetEvent
%ifdef SetEvent
%define! Parevent
%include Common\SimpleEventsSetEvent.Inc
void %'ModuleName'%.%SetEvent(uint8_t event)
{
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  /* event is in the range of 0..255: find bit position in array */
  %@CriticalSection@'ModuleName'%.EnterCritical();
  %'ModuleName'%.Events[event/8] |= 0x80>>(event%%8);
  %@CriticalSection@'ModuleName'%.ExitCritical();
}

%endif %- SetEvent
%-BW_METHOD_END SetEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearEvent
%ifdef ClearEvent
%define! Parevent
%include Common\SimpleEventsClearEvent.Inc
void %'ModuleName'%.%ClearEvent(uint8_t event)
{
  %@CriticalSection@'ModuleName'%.CriticalVariable();

 /* event is in the range of 0..255: find bit position in array */
  %@CriticalSection@'ModuleName'%.EnterCritical();
  %'ModuleName'%.Events[event/8] &= ~(0x80>>(event%%8));
  %@CriticalSection@'ModuleName'%.ExitCritical();
}

%endif %- ClearEvent
%-BW_METHOD_END ClearEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetEvent
%ifdef GetEvent
%define! Parevent
%define! RetVal
%include Common\SimpleEventsGetEvent.Inc
bool %'ModuleName'%.%GetEvent(uint8_t event)
{
  /* event is in the range of 0..255: find bit position in array */
  return (bool)(%'ModuleName'%.Events[event/8]&(0x80>>(event%%8)));
}

%endif %- GetEvent
%-BW_METHOD_END GetEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetClearEvent
%ifdef GetClearEvent
%define! Parevent
%define! RetVal
%include Common\SimpleEventsGetClearEvent.Inc
bool %'ModuleName'%.%GetClearEvent(uint8_t event)
{
  bool isSet = FALSE;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  %@CriticalSection@'ModuleName'%.EnterCritical();
  if (%'ModuleName'%.GetEvent(event)) { /* event present */
    %'ModuleName'%.Events[event/8] &= ~(0x80>>(event%%8)); /* clear event */
    isSet = TRUE;
  }
  %@CriticalSection@'ModuleName'%.ExitCritical();
  return isSet;
}

%endif %- GetClearEvent
%-BW_METHOD_END GetClearEvent
%-************************************************************************************************************
%-BW_METHOD_BEGIN EventsPending
%ifdef EventsPending
%define! RetVal
%include Common\SimpleEventsEventsPending.Inc
bool %'ModuleName'%.%EventsPending(void)
{
 %- for small number of events: check the bytes
 %if %NumOfEvents <=. '8'
  return (bool)(%'ModuleName'%.Events[0]!=0);
 %elif %NumOfEvents <=. '16'
  return (bool)(%'ModuleName'%.Events[0]!=0 || %'ModuleName'%.Events[1]!=0);
 %elif %NumOfEvents <=. '24'
  return (%'ModuleName'%.Events[0]!=0 || %'ModuleName'%.Events[1]!=0 || %'ModuleName'%.Events[2]!=0);
 %elif %NumOfEvents <=. '32'
  return (bool)(%'ModuleName'%.Events[0]!=0 || %'ModuleName'%.Events[1]!=0 || %'ModuleName'%.Events[2]!=0 || %'ModuleName'%.Events[3]!=0);
 %else /* iterate through the array */
  char i; /* local counter */

  for(i=0; i<(%'ModuleName'%.NOF_EVENTS/8)+1; i++) {
    if (%'ModuleName'%.Events[i] != 0) { /* there are events pending */
      return TRUE;
    }
  }
  return FALSE;
 %endif
}

%endif %- EventsPending
%-BW_METHOD_END EventsPending
%-************************************************************************************************************
%-BW_METHOD_BEGIN HandleEvent
%ifdef HandleEvent
%include Common\SimpleEventsHandleEvent.Inc
void %'ModuleName'%.%HandleEvent(void)
{
  /* Handle the one with the highest priority. */
  uint8_t event;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

%if %PowerSave = 'yes'
   if (!%'ModuleName'%.%EventsPending()) {
     /* no events pending */
    %'ProcessorModule'%.SetWaitMode(); /* make sure that this method is enabled in the CPU bean */
   }
%endif /* PowerSave */
  %@CriticalSection@'ModuleName'%.EnterCritical();
  for (event=0; event<%'ModuleName'%.NOF_EVENTS; event++) { /* does a test on every event */
    if (%'ModuleName'%.GetEvent(event)) { /* event present */
      %'ModuleName'%.Events[event/8] &= ~(0x80>>(event%%8)); /* clear event */
      break; /* get out of loop */
    }
  }
  %@CriticalSection@'ModuleName'%.ExitCritical();
%if defined(AppHandleEvent)
  /*lint -save -e522 function lacks side effect  */
  if (event != %'ModuleName'%.NOF_EVENTS) {
    %AppHandleEvent(event);
  }
  /*lint -restore */
%endif
}

%endif %- HandleEvent
%-BW_METHOD_END HandleEvent
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
%include Common\GeneralInternal.inc (Init)
void %'ModuleName'%.Init(void)
{
%if %NumOfEvents <=. '8'
  %'ModuleName'%.Events[0] = 0; /* initialize data structure */
%else
  uint8_t i;

  for(i=0;i<sizeof(%'ModuleName'%.Events); i++) {
    %'ModuleName'%.Events[i] = 0; /* initialize data structure */
  }
%endif
}

%-INTERNAL_METHOD_END Init
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN AppHandleEvent
%ifdef AppHandleEvent
%IMPLEMENTATION AppHandleEvent
%define! Parevent
%include Common\SimpleEventsAppHandleEvent.Inc
void %AppHandleEvent(uint8_t event)
{
  (void)event; /* only to avoid compiler warning about unused variable */
  /* Write your code here ... */
}

%endif %- AppHandleEvent
%-BW_METHOD_END AppHandleEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if InitializeOnInit='yes'
  %if LowPowerEnabled='yes' & %@LowPower@SpecialInit='yes'
  %if %@LowPower@RAMlostAfterRecovery='yes'
  %'ModuleName'%.Init();
  %else
  if (%@LowPower@'ModuleName'%.InitializeRAMinInit()) { /* only initialize driver RAM if needed */
    %'ModuleName'%.Init();
  }
  %endif
  %else
  %'ModuleName'%.Init();
  %endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
