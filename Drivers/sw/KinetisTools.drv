%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    09.10.2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\KinetisToolsSettings.Inc
%define! Abstract Common\KinetisToolsAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_ConstCharPtr
#define __BWUserType_%'ModuleName'_ConstCharPtr
  typedef const uint8_t *%'ModuleName'_ConstCharPtr;             %>40/* Pointer to constant string */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
typedef struct {
  uint8_t id[10]; /* 80 bit ID */
} %'ModuleName'%.UID;

typedef enum {
  %'ModuleName'%.FAMILY_K10_K12,                                 %>40/* K10 or K12 */
  %'ModuleName'%.FAMILY_K20_K22,                                 %>40/* K10 or K12 */
  %'ModuleName'%.FAMILY_K30_K11_K61,                             %>40/* K30, K11 or K61 */
  %'ModuleName'%.FAMILY_K40_K21,                                 %>40/* K40 or K21 */
  %'ModuleName'%.FAMILY_K70,                                     %>40/* K70 */
  %'ModuleName'%.FAMILY_UNKONWN,                                 %>40/* Unknown */
  %'ModuleName'%.FAMILY_LAST                                     %>40/* Must be last one! */
} %'ModuleName'%.FAMILY;

%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand
%if (CPUfamily = "Kinetis")
%if %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M0P) = 'yes'
#define %'ModuleName'%.CPU_IS_M0_PLUS  1
#define %'ModuleName'%.CPU_IS_M4       0
%else
#define %'ModuleName'%.CPU_IS_M0_PLUS  0
#define %'ModuleName'%.CPU_IS_M4       1
%endif
%else
#error "Not a Kinetis!"
%endif
%if (%CPUDB_prph_has_feature(CPU,SDK_SUPPORT) = 'yes') %- TRUE/FALSE not defined for SDK projects
#define %'ModuleName'%.IS_USING_KINETIS_SDK   1 /* 1: using Kinetis SDK, 0: not using Kinetis SDK */
%else
#define %'ModuleName'%.IS_USING_KINETIS_SDK   0 /* 1: using Kinetis SDK, 0: not using Kinetis SDK */
%endif

%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char* cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\KinetisToolsParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN SoftwareReset
%ifdef SoftwareReset
void %'ModuleName'%.%SoftwareReset(void);
%include Common\KinetisToolsSoftwareReset.Inc

%endif %- SoftwareReset
%-BW_METHOD_END SoftwareReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDGet
%ifdef UIDGet
uint8_t %'ModuleName'%.%UIDGet(%'ModuleName'_UID *uid);
%define! Paruid
%define! RetVal
%include Common\KinetisToolsUIDGet.Inc

%endif %- UIDGet
%-BW_METHOD_END UIDGet
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDSame
%ifdef UIDSame
bool %'ModuleName'%.%UIDSame(const %'ModuleName'_UID *src, const %'ModuleName'_UID *dst);
%define! Parsrc
%define! ParVariable_1
%define! RetVal
%include Common\KinetisToolsUIDSame.Inc

%endif %- UIDSame
%-BW_METHOD_END UIDSame
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDtoString
%ifdef UIDtoString
uint8_t %'ModuleName'%.%UIDtoString(const %'ModuleName'_UID *uid, uint8_t *buf, size_t bufSize);
%define! Paruid
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\KinetisToolsUIDtoString.Inc

%endif %- UIDtoString
%-BW_METHOD_END UIDtoString
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetKinetisFamilyString
%ifdef GetKinetisFamilyString
%'ModuleName'_ConstCharPtr %'ModuleName'%.%GetKinetisFamilyString(void);
%define! RetVal
%include Common\KinetisToolsGetKinetisFamilyString.Inc

%endif %- GetKinetisFamilyString
%-BW_METHOD_END GetKinetisFamilyString
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\KinetisToolsSettings.Inc
%define! Abstract Common\KinetisToolsAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for size_t */
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
#if %'ModuleName'%.CPU_IS_M4
static const unsigned char *KinetisM4FamilyStrings[] =
{ /* FAMID (3 bits) are used as index */
  (const unsigned char *)"K10 or K12 Family",          /* 000 */
  (const unsigned char *)"K20 or K22 Family",          /* 001 */
  (const unsigned char *)"K30, K11 or K61 Family",     /* 010 */
  (const unsigned char *)"K40 or K21 Family",          /* 011 */
  (const unsigned char *)"K60 or K62 Family",          /* 100 */
  (const unsigned char *)"K70 Family",                 /* 101 */
  (const unsigned char *)"Reserved",                   /* 110 */
  (const unsigned char *)"Reserved"                    /* 111 */
};
#endif
#if %'ModuleName'%.CPU_IS_M0_PLUS
static const unsigned char *KinetisM0FamilyStrings[] =
{ /* FAMID (3 bits) are used as index */
  (const unsigned char *)"KL0x",          /* 000 */
  (const unsigned char *)"KL1x",          /* 001 */
  (const unsigned char *)"KL2x",          /* 010 */
  (const unsigned char *)"KL3x",          /* 011 */
  (const unsigned char *)"KL4x",          /* 100 */
  (const unsigned char *)"Reserved",      /* 101 */
  (const unsigned char *)"Reserved",      /* 110 */
  (const unsigned char *)"Reserved"       /* 111 */
};
#endif


%if defined(Shell)

static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io)
{
  uint8_t buf[64], res;
  %'ModuleName'%.UID uid;

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (unsigned char*)"\r\n", io->stdOut);
  res = %'ModuleName'%.%UIDGet(&uid);
  if (res==ERR_OK) {
    res = %'ModuleName'%.%UIDtoString(&uid, buf, sizeof(buf));
  }
  if (res!=ERR_OK) {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"ERROR\r\n");
  }
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  UID", buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  Family", (uint8_t*)%'ModuleName'%.%GetKinetisFamilyString(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
  return ERR_OK;
}

static uint8_t PrintHelp(const %@Shell@'ModuleName'%.StdIOType *io)
{
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  reset", (unsigned char*)"Performs a software reset\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
  return ERR_OK;
}
%endif %- Shell

%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SoftwareReset
%ifdef SoftwareReset
%include Common\KinetisToolsSoftwareReset.Inc
void %'ModuleName'%.%SoftwareReset(void)
{
  /* Generic way to request a reset from software for ARM Cortex */
  /* See https://community.freescale.com/thread/99740
     To write to this register, you must write 0x5FA to the VECTKEY field, otherwise the processor ignores the write.
     SYSRESETREQ will cause a system reset asynchronously, so need to wait afterwards.
   */
#if %'ModuleName'%.IS_USING_KINETIS_SDK
  SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
#else
  SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_SYSRESETREQ_MASK;
#endif
  for(;;) {
    /* wait until reset */
  }
}

%endif %- SoftwareReset
%-BW_METHOD_END SoftwareReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDGet
%ifdef UIDGet
%define! Paruid
%define! RetVal
%include Common\KinetisToolsUIDGet.Inc
/*!
 * \brief Return the 80bit UID of the device
 * \param uid Pointer to the buffer where to store the UID
 * \return Error code, ERR_OK if everything is ok.
 */
uint8_t %'ModuleName'%.%UIDGet(%'ModuleName'_UID *uid)
{
#ifdef SIM_UIDMH /* 80 bit UUID: SIM_UIDMH, SIM_UIDML and SIM_UIDL */
  uid->id[0] = (SIM_UIDMH>>8)&0xff;
  uid->id[1] = SIM_UIDMH&0xff;
  uid->id[2] = (SIM_UIDML>>24)&0xff;
  uid->id[3] = (SIM_UIDML>>16)&0xff;
  uid->id[4] = (SIM_UIDML>>8)&0xff;
  uid->id[5] = SIM_UIDML&0xff;
  uid->id[6] = (SIM_UIDL>>24)&0xff;
  uid->id[7] = (SIM_UIDL>>16)&0xff;
  uid->id[8] = (SIM_UIDL>>8)&0xff;
  uid->id[9] = SIM_UIDL&0xff;
#elif defined(SIM_UUIDMH) /* KE06Z: SIM_UUIDMH, SIM_UUIDML and SIM_UUIDL */
  uid->id[0] = (SIM_UUIDMH>>8)&0xff;
  uid->id[1] = SIM_UUIDMH&0xff;
  uid->id[2] = (SIM_UUIDML>>24)&0xff;
  uid->id[3] = (SIM_UUIDML>>16)&0xff;
  uid->id[4] = (SIM_UUIDML>>8)&0xff;
  uid->id[5] = SIM_UUIDML&0xff;
  uid->id[6] = (SIM_UUIDL>>24)&0xff;
  uid->id[7] = (SIM_UUIDL>>16)&0xff;
  uid->id[8] = (SIM_UUIDL>>8)&0xff;
  uid->id[9] = SIM_UUIDL&0xff;
#else /* some devices like the KE02Z only have 64bit UUID: only SIM_UUIDH and SIM_UUIDL */
  uid->id[0] = 0;
  uid->id[1] = 0;
  uid->id[2] = (SIM_UUIDH>>24)&0xff;
  uid->id[3] = (SIM_UUIDH>>16)&0xff;
  uid->id[4] = (SIM_UUIDH>>8)&0xff;
  uid->id[5] = SIM_UUIDH&0xff;
  uid->id[6] = (SIM_UUIDL>>24)&0xff;
  uid->id[7] = (SIM_UUIDL>>16)&0xff;
  uid->id[8] = (SIM_UUIDL>>8)&0xff;
  uid->id[9] = SIM_UUIDL&0xff;
#endif
  return ERR_OK;
}

%endif %- UIDGet
%-BW_METHOD_END UIDGet
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDSame
%ifdef UIDSame
%define! Parsrc
%define! ParVariable_1
%define! RetVal
%include Common\KinetisToolsUIDSame.Inc
/*!
 * \brief Compares two UID
 * \param src One UID
 * \param dst The other UID
 * \return TRUE if the two UID's are the same
 */
bool %'ModuleName'%.%UIDSame(const %'ModuleName'_UID *src, const %'ModuleName'_UID *dst)
{
  int i;

  for(i=0; i<sizeof(%'ModuleName'_UID); i++) {
    if (src->id[i]!=dst->id[i]) {
      return FALSE; /* no match */
    }
  }
  return TRUE;
}

%endif %- UIDSame
%-BW_METHOD_END UIDSame
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDtoString
%ifdef UIDtoString
%define! Paruid
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\KinetisToolsUIDtoString.Inc
/*!
 * \brief Transforms the 80bit UID into a string
 * \param id Pointer to the buffer where to store the string
 * \param bufSize Size of buffer in bytes
 * \return Error code, ERR_OK if everything is ok.
 */
uint8_t %'ModuleName'%.%UIDtoString(const %'ModuleName'_UID *uid, uint8_t *buf, size_t bufSize)
{
  int i;

  %@Utility@'ModuleName'%.strcpy(buf, bufSize, (unsigned char*)"{");
  for(i=0;i<sizeof(%'ModuleName'_UID);i++) {
    %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)"0x");
    %@Utility@'ModuleName'%.strcatNum8Hex(buf, bufSize, uid->id[i]);
    if (i<sizeof(%'ModuleName'_UID)-1) {
      %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)", ");
    }
  }
  %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)"}");
  return ERR_OK;
}

%endif %- UIDtoString
%-BW_METHOD_END UIDtoString
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\KinetisToolsParseCommand.Inc
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char* cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  uint8_t res = ERR_OK;

  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP) == 0
    || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help") == 0) {
    *handled = TRUE;
    return PrintHelp(io);
  } else if (   (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0)
             || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status") == 0)
            )
  {
    *handled = TRUE;
    res = PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' reset") == 0) {
    *handled = TRUE;
    %'ModuleName'%.%SoftwareReset(); /* will perform RESET and does NOT return here! */
  }
  return res;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetKinetisFamilyString
%ifdef GetKinetisFamilyString
%define! RetVal
%include Common\KinetisToolsGetKinetisFamilyString.Inc
%'ModuleName'_ConstCharPtr %'ModuleName'%.%GetKinetisFamilyString(void)
{
#if %'ModuleName'%.CPU_IS_M0_PLUS
#ifdef SIM_SDID /* normal Kinetis define this */
  int32_t val;

  val = (SIM_SDID>>28)&0x3; /* bits 30..28 */
  return KinetisM0FamilyStrings[val];
#elif defined(SIM_SRSID_FAMID) /* MKE02Z4 defines this, hopefully all other KE too... */
  return "KE0x Family"; /* 0000 only KE0x supported */
#else
  #error "Unknown architecture!"
  return "ERROR";
#endif
#elif %'ModuleName'%.CPU_IS_M4
  int32_t val;

  val = (SIM_SDID>>4)&0x3; /* bits 6..4 */
  return KinetisM4FamilyStrings[val];
#else
  #error "Unknown architecture!"
  return "ERROR";
#endif
}

%endif %- GetKinetisFamilyString
%-BW_METHOD_END GetKinetisFamilyString
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
