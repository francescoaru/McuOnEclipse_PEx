%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    13.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_App_Callback Method to handle class callbacks from USB
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%- copy files
%include FSL_USB_HID_Keyboard_Device_Files.prg
%-
%-
%INTERFACE
%define! Settings Common\FSL_USB_HID_Keyboard_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_HID_Keyboard_DeviceAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for size_t */
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

/*Key Code*/
#define KEY_NONE                               0x00
#define KEY_ERRORROLLOVER                      0x01
#define KEY_POSTFAIL                           0x02
#define KEY_ERRORUNDEFINED                     0x03
#define KEY_A                                  0x04
#define KEY_B                                  0x05
#define KEY_C                                  0x06
#define KEY_D                                  0x07
#define KEY_E                                  0x08
#define KEY_F                                  0x09
#define KEY_G                                  0x0A
#define KEY_H                                  0x0B
#define KEY_I                                  0x0C
#define KEY_J                                  0x0D
#define KEY_K                                  0x0E
#define KEY_L                                  0x0F
#define KEY_M                                  0x10
#define KEY_N                                  0x11
#define KEY_O                                  0x12
#define KEY_P                                  0x13
#define KEY_Q                                  0x14
#define KEY_R                                  0x15
#define KEY_S                                  0x16
#define KEY_T                                  0x17
#define KEY_U                                  0x18
#define KEY_V                                  0x19
#define KEY_W                                  0x1A
#define KEY_X                                  0x1B
#define KEY_Y                                  0x1C
#define KEY_Z                                  0x1D
#define KEY_1_EXCLAMATION_MARK                 0x1E
#define KEY_2_AT                               0x1F
#define KEY_3_NUMBER_SIGN                      0x20
#define KEY_4_DOLLAR                           0x21
#define KEY_5_PERCENT                          0x22
#define KEY_6_CARET                            0x23
#define KEY_7_AMPERSAND                        0x24
#define KEY_8_ASTERISK                         0x25
#define KEY_9_OPARENTHESIS                     0x26
#define KEY_0_CPARENTHESIS                     0x27
#define KEY_ENTER                              0x28
#define KEY_ESCAPE                             0x29
#define KEY_BACKSPACE                          0x2A
#define KEY_TAB                                0x2B
#define KEY_SPACEBAR                           0x2C
#define KEY_MINUS_UNDERSCORE                   0x2D
#define KEY_EQUAL_PLUS                         0x2E
#define KEY_OBRACKET_AND_OBRACE                0x2F
#define KEY_CBRACKET_AND_CBRACE                0x30
#define KEY_BACKSLASH_VERTICAL_BAR             0x31
#define KEY_NONUS_NUMBER_SIGN_TILDE            0x32
#define KEY_SEMICOLON_COLON                    0x33
#define KEY_SINGLE_AND_DOUBLE_QUOTE            0x34
#define KEY_GRAVE_ACCENT_AND_TILDE             0x35
#define KEY_COMMA_AND_LESS                     0x36
#define KEY_DOT_GREATER                        0x37
#define KEY_SLASH_QUESTION                     0x38
#define KEY_CAPS_LOCK                          0x39
#define KEY_F1                                 0x3A
#define KEY_F2                                 0x3B
#define KEY_F3                                 0x3C
#define KEY_F4                                 0x3D
#define KEY_F5                                 0x3E
#define KEY_F6                                 0x3F
#define KEY_F7                                 0x40
#define KEY_F8                                 0x41
#define KEY_F9                                 0x42
#define KEY_F10                                0x43
#define KEY_F11                                0x44
#define KEY_F12                                0x45
#define KEY_PRINTSCREEN                        0x46
#define KEY_SCROLL_LOCK                        0x47
#define KEY_PAUSE                              0x48
#define KEY_INSERT                             0x49
#define KEY_HOME                               0x4A
#define KEY_PAGEUP                             0x4B
#define KEY_DELETE                             0x4C
#define KEY_END1                               0x4D
#define KEY_PAGEDOWN                           0x4E
#define KEY_RIGHTARROW                         0x4F
#define KEY_LEFTARROW                          0x50
#define KEY_DOWNARROW                          0x51
#define KEY_UPARROW                            0x52
#define KEY_KEYPAD_NUM_LOCK_AND_CLEAR          0x53
#define KEY_KEYPAD_SLASH                       0x54
#define KEY_KEYPAD_ASTERIKS                    0x55
#define KEY_KEYPAD_MINUS                       0x56
#define KEY_KEYPAD_PLUS                        0x57
#define KEY_KEYPAD_ENTER                       0x58
#define KEY_KEYPAD_1_END                       0x59
#define KEY_KEYPAD_2_DOWN_ARROW                0x5A
#define KEY_KEYPAD_3_PAGEDN                    0x5B
#define KEY_KEYPAD_4_LEFT_ARROW                0x5C
#define KEY_KEYPAD_5                           0x5D
#define KEY_KEYPAD_6_RIGHT_ARROW               0x5E
#define KEY_KEYPAD_7_HOME                      0x5F
#define KEY_KEYPAD_8_UP_ARROW                  0x60
#define KEY_KEYPAD_9_PAGEUP                    0x61
#define KEY_KEYPAD_0_INSERT                    0x62
#define KEY_KEYPAD_DECIMAL_SEPARATOR_DELETE    0x63
#define KEY_NONUS_BACK_SLASH_VERTICAL_BAR      0x64
#define KEY_APPLICATION                        0x65
#define KEY_POWER                              0x66
#define KEY_KEYPAD_EQUAL                       0x67
#define KEY_F13                                0x68
#define KEY_F14                                0x69
#define KEY_F15                                0x6A
#define KEY_F16                                0x6B
#define KEY_F17                                0x6C
#define KEY_F18                                0x6D
#define KEY_F19                                0x6E
#define KEY_F20                                0x6F
#define KEY_F21                                0x70
#define KEY_F22                                0x71
#define KEY_F23                                0x72
#define KEY_F24                                0x73
#define KEY_EXECUTE                            0x74
#define KEY_HELP                               0x75
#define KEY_MENU                               0x76
#define KEY_SELECT                             0x77
#define KEY_STOP                               0x78
#define KEY_AGAIN                              0x79
#define KEY_UNDO                               0x7A
#define KEY_CUT                                0x7B
#define KEY_COPY                               0x7C
#define KEY_PASTE                              0x7D
#define KEY_FIND                               0x7E
#define KEY_MUTE                               0x7F
#define KEY_VOLUME_UP                          0x80
#define KEY_VOLUME_DOWN                        0x81
#define KEY_LOCKING_CAPS_LOCK                  0x82
#define KEY_LOCKING_NUM_LOCK                   0x83
#define KEY_LOCKING_SCROLL_LOCK                0x84
#define KEY_KEYPAD_COMMA                       0x85
#define KEY_KEYPAD_EQUAL_SIGN                  0x86
#define KEY_INTERNATIONAL1                     0x87
#define KEY_INTERNATIONAL2                     0x88
#define KEY_INTERNATIONAL3                     0x89
#define KEY_INTERNATIONAL4                     0x8A
#define KEY_INTERNATIONAL5                     0x8B
#define KEY_INTERNATIONAL6                     0x8C
#define KEY_INTERNATIONAL7                     0x8D
#define KEY_INTERNATIONAL8                     0x8E
#define KEY_INTERNATIONAL9                     0x8F
#define KEY_LANG1                              0x90
#define KEY_LANG2                              0x91
#define KEY_LANG3                              0x92
#define KEY_LANG4                              0x93
#define KEY_LANG5                              0x94
#define KEY_LANG6                              0x95
#define KEY_LANG7                              0x96
#define KEY_LANG8                              0x97
#define KEY_LANG9                              0x98
#define KEY_ALTERNATE_ERASE                    0x99
#define KEY_SYSREQ                             0x9A
#define KEY_CANCEL                             0x9B
#define KEY_CLEAR                              0x9C
#define KEY_PRIOR                              0x9D
#define KEY_RETURN                             0x9E
#define KEY_SEPARATOR                          0x9F
#define KEY_OUT                                0xA0
#define KEY_OPER                               0xA1
#define KEY_CLEAR_AGAIN                        0xA2
#define KEY_CRSEL                              0xA3
#define KEY_EXSEL                              0xA4
#define KEY_KEYPAD_00                          0xB0
#define KEY_KEYPAD_000                         0xB1
#define KEY_THOUSANDS_SEPARATOR                0xB2
#define KEY_DECIMAL_SEPARATOR                  0xB3
#define KEY_CURRENCY_UNIT                      0xB4
#define KEY_CURRENCY_SUB_UNIT                  0xB5
#define KEY_KEYPAD_OPARENTHESIS                0xB6
#define KEY_KEYPAD_CPARENTHESIS                0xB7
#define KEY_KEYPAD_OBRACE                      0xB8
#define KEY_KEYPAD_CBRACE                      0xB9
#define KEY_KEYPAD_TAB                         0xBA
#define KEY_KEYPAD_BACKSPACE                   0xBB
#define KEY_KEYPAD_A                           0xBC
#define KEY_KEYPAD_B                           0xBD
#define KEY_KEYPAD_C                           0xBE
#define KEY_KEYPAD_D                           0xBF
#define KEY_KEYPAD_E                           0xC0
#define KEY_KEYPAD_F                           0xC1
#define KEY_KEYPAD_XOR                         0xC2
#define KEY_KEYPAD_CARET                       0xC3
#define KEY_KEYPAD_PERCENT                     0xC4
#define KEY_KEYPAD_LESS                        0xC5
#define KEY_KEYPAD_GREATER                     0xC6
#define KEY_KEYPAD_AMPERSAND                   0xC7
#define KEY_KEYPAD_LOGICAL_AND                 0xC8
#define KEY_KEYPAD_VERTICAL_BAR                0xC9
#define KEY_KEYPAD_LOGIACL_OR                  0xCA
#define KEY_KEYPAD_COLON                       0xCB
#define KEY_KEYPAD_NUMBER_SIGN                 0xCC
#define KEY_KEYPAD_SPACE                       0xCD
#define KEY_KEYPAD_AT                          0xCE
#define KEY_KEYPAD_EXCLAMATION_MARK            0xCF
#define KEY_KEYPAD_MEMORY_STORE                0xD0
#define KEY_KEYPAD_MEMORY_RECALL               0xD1
#define KEY_KEYPAD_MEMORY_CLEAR                0xD2
#define KEY_KEYPAD_MEMORY_ADD                  0xD3
#define KEY_KEYPAD_MEMORY_SUBTRACT             0xD4
#define KEY_KEYPAD_MEMORY_MULTIPLY             0xD5
#define KEY_KEYPAD_MEMORY_DIVIDE               0xD6
#define KEY_KEYPAD_PLUSMINUS                   0xD7
#define KEY_KEYPAD_CLEAR                       0xD8
#define KEY_KEYPAD_CLEAR_ENTRY                 0xD9
#define KEY_KEYPAD_BINARY                      0xDA
#define KEY_KEYPAD_OCTAL                       0xDB
#define KEY_KEYPAD_DECIMAL                     0xDC
#define KEY_KEYPAD_HEXADECIMAL                 0xDD
#define KEY_LEFTCONTROL                        0xE0
#define KEY_LEFTSHIFT                          0xE1
#define KEY_LEFTALT                            0xE2
#define KEY_LEFT_GUI                           0xE3
#define KEY_RIGHTCONTROL                       0xE4
#define KEY_RIGHTSHIFT                         0xE5
#define KEY_RIGHTALT                           0xE6
#define KEY_RIGHT_GUI                          0xE7

#define MODIFERKEYS_NONE                          0x00
#define MODIFERKEYS_LEFT_CTRL                     0x01
#define MODIFERKEYS_LEFT_SHIFT                    0x02
#define MODIFERKEYS_LEFT_ALT                      0x04
#define MODIFERKEYS_LEFT_GUI                      0x08
#define MODIFERKEYS_RIGHT_CTRL                    0x10
#define MODIFERKEYS_RIGHT_SHIFT                   0x20
#define MODIFERKEYS_RIGHT_ALT                     0x40
#define MODIFERKEYS_RIGHT_GUI                     0x80

#define  KEYBOARD_BUFF_SIZE    (8)   /* report buffer size */
#define  REQ_DATA_SIZE         (1)

/* error/event codes for events */
#define %'ModuleName'%.USB_ERR_INIT            1  /* USB initialization error */
#define %'ModuleName'%.USB_APP_BUS_RESET       2  /* bus has reset */
#define %'ModuleName'%.USB_APP_ENUM_COMPLETE   3  /* device enumeration completed */
#define %'ModuleName'%.USB_APP_ERROR           4  /* application error */
#define %'ModuleName'%.USB_APP_BUS_SUSPEND     5  /* bus asks for suspend */
#define %'ModuleName'%.USB_APP_BUS_RESUME      6  /* bus resumed */
#define %'ModuleName'%.USB_APP_SEND_COMPLETE   7  /* sending message completed */
#define %'ModuleName'%.USB_APP_NUMLOCK_ON      8  /* request from host to turn NumLock on */
#define %'ModuleName'%.USB_APP_NUMLOCK_OFF     9  /* request from host to turn NumLock off */
#define %'ModuleName'%.USB_ERR_DEINIT         10  /* USB deinitialization error */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
byte %'ModuleName'%.%Init(void);
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
byte %'ModuleName'%.%App_Task(void);
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceApp_Task.Inc

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_App_Callback
%ifdef USB_App_Callback
void %'ModuleName'%.%USB_App_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_HID_Keyboard_DeviceUSB_App_Callback.Inc

%endif %- USB_App_Callback
%-BW_METHOD_END USB_App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN USB_Notify_Callback
%ifdef USB_Notify_Callback
void %'ModuleName'%.%USB_Notify_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\FSL_USB_HID_Keyboard_DeviceUSB_Notify_Callback.Inc

%endif %- USB_Notify_Callback
%-BW_METHOD_END USB_Notify_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Notify_Callback
%ifdef Notify_Callback
void %'ModuleName'%.%Notify_Callback(byte request, word value, word wIndex, byte** data, USB_PACKET_SIZE* size);
%define! Parrequest
%define! Parvalue
%define! ParwIndex
%define! Pardata
%define! Parsize
%include Common\FSL_USB_HID_Keyboard_DeviceNotify_Callback.Inc

%endif %- Notify_Callback
%-BW_METHOD_END Notify_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendStr
%ifdef SendStr
byte %'ModuleName'%.%SendStr(byte *str);
%define! Parstr
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceSendStr.Inc

%endif %- SendStr
%-BW_METHOD_END SendStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN HidCodeFromAscii
%ifdef HidCodeFromAscii
byte %'ModuleName'%.%HidCodeFromAscii(byte ch);
%define! Parch
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceHidCodeFromAscii.Inc

%endif %- HidCodeFromAscii
%-BW_METHOD_END HidCodeFromAscii
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
byte %'ModuleName'%.%SendChar(byte ch);
%define! Parch
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceSendChar.Inc

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN ModifierCodeFromAscii
%ifdef ModifierCodeFromAscii
byte %'ModuleName'%.%ModifierCodeFromAscii(byte ch);
%define! Parch
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceModifierCodeFromAscii.Inc

%endif %- ModifierCodeFromAscii
%-BW_METHOD_END ModifierCodeFromAscii
%-************************************************************************************************************
%-BW_METHOD_BEGIN Send
%ifdef Send
byte %'ModuleName'%.%Send(byte modifier, byte key);
%define! Parmodifier
%define! Parkey
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceSend.Inc

%endif %- Send
%-BW_METHOD_END Send
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
void %'ModuleName'%.App_Callback(byte controller_ID, byte event_type, void *val);
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
byte %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
bool %'ModuleName'%.%isEnumerated(void);
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceisEnumerated.Inc

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%INTERFACE OnEvent
void %OnEvent(byte error);
%define! Parerror
%include Common\FSL_USB_HID_Keyboard_DeviceOnEvent.Inc

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FSL_USB_HID_Keyboard_DeviceSettings.Inc
%define! Abstract Common\FSL_USB_HID_Keyboard_DeviceAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include "hidef.h"          /* for EnableInterrupts macro */
#include "derivative.h"     /* include peripheral declarations */
#include "types.h"          /* Contains User Defined Data Types */
#include <stdio.h>
/* skip the inclusion in dependency state */
#ifndef __NO_SETJMP
  #include <stdio.h>
#endif
#include <stdlib.h>
#include <string.h>
#include "usb_hid.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define  CONTROLLER_ID      (0)   /* ID to identify USB CONTROLLER */

static boolean keyboard_init=FALSE;           /* Keyboard App Init Flag */
static byte rpt_buf[KEYBOARD_BUFF_SIZE];      /* Key Press Report Buffer */
static uint8_t g_app_request_params[2];        /* for get/set idle and protocol requests */
static volatile boolean transactionOngoing = FALSE; /* flag to know if a transaction is currently ongoing */
/*****************************************************************************
 * Local Functions
 *****************************************************************************/
/******************************************************************************
 *
 *    @name        USB_App_Param_Callback
 *
 *    @brief       This function handles USB-HID Class callback
 *
 *    @param       request  :  request type
 *    @param       value    :  give report type and id
 *    @param       data     :  pointer to the data
 *    @param       size     :  size of the transfer
 *
 *    @return      status
 *                 USB_OK   :  Always
 *
 *****************************************************************************
 * This function is called whenever a HID class request is received. This
 * function handles these class requests.
 *****************************************************************************/
static uint8_t USB_App_Param_Callback (
      uint8_t request,       /* [IN] request type */
      uint_16 value,         /* [IN] report type and ID */
      uint_16 wIndex,        /* [IN] Interface */
      uint8_t** data,        /* [OUT] pointer to the data */
      USB_PACKET_SIZE* size  /* [OUT] size of the transfer */
)
{
  byte status = USB_OK;
  //uint_8 direction =  (uint_8)((request & USB_HID_REQUEST_DIR_MASK) >>3);
  byte index = (byte)((request - 2) & USB_HID_REQUEST_TYPE_MASK);
                                       /* index == 0 for get/set idle,
                                          index == 1 for get/set protocol */
  (void)wIndex;
  *size = 0;
  /* handle the class request */
  switch(request) {
    case USB_HID_GET_REPORT_REQUEST:
      *data = &rpt_buf[0]; /* point to the report to send */
      *size = KEYBOARD_BUFF_SIZE; /* report size */
       break;

    case USB_HID_SET_REPORT_REQUEST:
      if(**data == 1)  {       /* turn NumLock led on request from HOST */
        %if defined(OnEvent)
        %OnEvent(%'ModuleName'%.USB_APP_NUMLOCK_ON);
        %endif
      } else if(**data == 0) {       /* turn NumLock led off request from HOST */
        %if defined(OnEvent)
        %OnEvent(%'ModuleName'%.USB_APP_NUMLOCK_OFF);
        %endif
      }
      break;

    case USB_HID_GET_IDLE_REQUEST:
      /* point to the current idle rate */
      *data = &g_app_request_params[index];
      *size = REQ_DATA_SIZE;
      break;

    case USB_HID_SET_IDLE_REQUEST:
      /* set the idle rate sent by the host */
      if(index <2) {
        g_app_request_params[index] =(byte)((value & MSB_MASK) >> HIGH_BYTE_SHIFT);
      }
      break;

    case USB_HID_GET_PROTOCOL_REQUEST:
      /* point to the current protocol code
        0 = Boot Protocol
        1 = Report Protocol*/
      *data = &g_app_request_params[index];
      *size = REQ_DATA_SIZE;
      break;

    case USB_HID_SET_PROTOCOL_REQUEST:
      /* set the protocol sent by the host
         0 = Boot Protocol
         1 = Report Protocol*/
      if(index < 2) {
        g_app_request_params[index] = (byte)(value);
      }
      break;
    }
    return status;
}
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG App_Callback
%define! Parcontroller_ID
%define! Parevent_type
%define! Parval
%include Common\GeneralInternal.inc (App_Callback)
void %'ModuleName'%.App_Callback(byte controller_ID, byte event_type, void *val)
{
  UNUSED(controller_ID)
  UNUSED(val)
  if((event_type == USB_APP_BUS_RESET) || (event_type == USB_APP_CONFIG_CHANGED)) {
    keyboard_init=FALSE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_BUS_RESET);
    %endif
  } else if(event_type == USB_APP_ENUM_COMPLETE) {
    /* if enumeration is complete set keyboard_init so that application can start */
    keyboard_init=TRUE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_ENUM_COMPLETE);
    %endif
  } else if(event_type == USB_APP_ERROR) {
    keyboard_init=FALSE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_ERROR);
    %endif
  } else if (event_type == USB_APP_BUS_SUSPEND) {
    keyboard_init=FALSE;
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_BUS_SUSPEND);
    %endif
  } else if (event_type == USB_APP_BUS_RESUME) {
   /* For the keyboard application, it is best to let the main app
    * handle all resume processing. Because of the software flow, we know
    * that after initiating the STOP mode and waking up, the application
    * will just continue, so we can resume there.
    */
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_BUS_RESUME);
    %endif
  } else if (event_type==USB_APP_SEND_COMPLETE && keyboard_init) {
    transactionOngoing = FALSE;
    %if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_APP_SEND_COMPLETE);
    %endif
  }
}

%-INTERNAL_METHOD_END App_Callback
%-************************************************************************************************************
%-BW_METHOD_BEGIN App_Task
%ifdef App_Task
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceApp_Task.Inc
byte %'ModuleName'%.%App_Task(void)
{
  uint16_t hidCode; /* upper 8bits are modifier, lower 8bits are hid code value */

  /* device is %CPUDevice */
%if (CPUDevice="MC9S08JE128") | (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60") | (CPUDevice="MC9S08JS16") | (CPUDevice="MC9S08MM128")
  if (USB_PROCESS_PENDING()) { /* doing this only for MC9S08JE128, MC9S08JM16, MC9S08JM60, MC9S08JS16 and MC9S08MM128 */
    USB_Engine();
  }
%endif
  USB_Class_HID_Periodic_Task(); /* call the periodic task function */
  if (!keyboard_init) {
    return ERR_BUSOFF; /* USB bus not available yet */
  }
  while (%@TxBuffer@'ModuleName'%.Get(&hidCode)==ERR_OK) { /* send everything in the queue */
    /* send character */
    rpt_buf[0] = (hidCode>>8)&0xFF; /* high byte is modifier */
    rpt_buf[2] = hidCode&0xFF; /* low byte is key code */
    transactionOngoing = TRUE;
    if (USB_Class_HID_Send_Data(CONTROLLER_ID, HID_ENDPOINT, rpt_buf, sizeof(rpt_buf))!=USB_OK) {
      transactionOngoing = FALSE;
      return ERR_FAILED;
    }
    while(transactionOngoing) {
      /* wait until we send the next transaction */
%if (CPUDevice="MC9S08JE128") | (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60") | (CPUDevice="MC9S08JS16") | (CPUDevice="MC9S08MM128")
      if (USB_PROCESS_PENDING()) { /* doing this only for MC9S08JE128, MC9S08JM16, MC9S08JM60, MC9S08JS16 and MC9S08MM128 */
        USB_Engine();
      }
%endif
    }
  } /* while */
  return ERR_OK;
}

%endif %- App_Task
%-BW_METHOD_END App_Task
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceDeinit.Inc
byte %'ModuleName'%.%Deinit(void)
{
  byte err;

  err = USB_Class_HID_DeInit(CONTROLLER_ID);
  transactionOngoing = FALSE;
  keyboard_init = FALSE;
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_DEINIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceInit.Inc
byte %'ModuleName'%.%Init(void)
{
  uint8_t err;

  transactionOngoing = FALSE;
  keyboard_init = FALSE;
  err = USB_Class_HID_Init(CONTROLLER_ID, %'ModuleName'%.App_Callback, NULL, USB_App_Param_Callback);
  if(err != USB_OK) {
    /* Error initializing USB HID Class */
%if defined(OnEvent)
    %OnEvent(%'ModuleName'%.USB_ERR_INIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN HidCodeFromAscii
%ifdef HidCodeFromAscii
%define! Parch
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceHidCodeFromAscii.Inc
/* Look-up table to convert from ASCII to HID key codes */
#define %'ModuleName'%.SHIFT (MODIFERKEYS_LEFT_SHIFT<<8) /* code for shift */
static const uint16_t hidKeyCode[128] = /* upper 8bits are modifier bits */
{
    0,                                                           %>40/* 0x00 Null */
    0,                                                           %>40/* 0x01 */
    0,                                                           %>40/* 0x02 */
    0,                                                           %>40/* 0x03 */
    0,                                                           %>40/* 0x04 */
    0,                                                           %>40/* 0x05 */
    0,                                                           %>40/* 0x06 */
    0,                                                           %>40/* 0x07 */
    KEY_BACKSPACE,                                               %>40/* 0x08 Backspace */
    KEY_TAB,                                                     %>40/* 0x09 Horizontal Tab */
    KEY_RETURN,                                                  %>40/* 0x0A Line Feed */
    0,                                                           %>40/* 0x0B */
    0,                                                           %>40/* 0x0C */
    KEY_RETURN,                                                  %>40/* 0x0D Carriage return */
    0,                                                           %>40/* 0x0E */
    0,                                                           %>40/* 0x0F */
    0,                                                           %>40/* 0x10 */
    0,                                                           %>40/* 0x11 */
    0,                                                           %>40/* 0x12 */
    0,                                                           %>40/* 0x13 */
    0,                                                           %>40/* 0x14 */
    0,                                                           %>40/* 0x15 */
    0,                                                           %>40/* 0x16 */
    0,                                                           %>40/* 0x17 */
    0,                                                           %>40/* 0x18 */
    0,                                                           %>40/* 0x19 */
    0,                                                           %>40/* 0x1A */
    KEY_ESCAPE,                                                  %>40/* 0x1B Escape */
    0,                                                           %>40/* 0x1C */
    0,                                                           %>40/* 0x1D */
    0,                                                           %>40/* 0x1E */
    0,                                                           %>40/* 0x1F */

    KEY_SPACEBAR,                                                %>40/* 0x20 */
    %'ModuleName'%.SHIFT|KEY_1_EXCLAMATION_MARK,                 %>40/* 0x21 ! */
    %'ModuleName'%.SHIFT|KEY_2_AT,                               %>40/* 0x22 " */
    %'ModuleName'%.SHIFT|KEY_3_NUMBER_SIGN,                      %>40/* 0x23 # */
    %'ModuleName'%.SHIFT|KEY_4_DOLLAR,                           %>40/* 0x24 $ */
    %'ModuleName'%.SHIFT|KEY_5_PERCENT,                          %>40/* 0x25 %% */
    %'ModuleName'%.SHIFT|KEY_7_AMPERSAND,                        %>40/* 0x26 & */
    %'ModuleName'%.SHIFT|KEY_SINGLE_AND_DOUBLE_QUOTE,            %>40/* 0x27 ' */
    %'ModuleName'%.SHIFT|KEY_9_OPARENTHESIS,                     %>40/* 0x28 ( */
    %'ModuleName'%.SHIFT|KEY_0_CPARENTHESIS,                     %>40/* 0x29 ) */
    %'ModuleName'%.SHIFT|KEY_8_ASTERISK,                         %>40/* 0x2A * */
    %'ModuleName'%.SHIFT|KEY_EQUAL_PLUS,                         %>40/* 0x2B + */
    KEY_COMMA_AND_LESS,                                          %>40/* 0x2C , */
    KEY_MINUS_UNDERSCORE,                                        %>40/* 0x2D - */
    KEY_DOT_GREATER,                                             %>40/* 0x2E . */
    KEY_SLASH_QUESTION,                                          %>40/* 0x2F / */
    %'ModuleName'%.SHIFT|KEY_0_CPARENTHESIS,                     %>40/* 0x30 0 */
    KEY_1_EXCLAMATION_MARK,                                      %>40/* 0x31 1 */
    KEY_2_AT,                                                    %>40/* 0x32 2 */
    KEY_3_NUMBER_SIGN,                                           %>40/* 0x33 3 */
    KEY_4_DOLLAR,                                                %>40/* 0x34 4 */
    KEY_5_PERCENT,                                               %>40/* 0x35 5 */
    KEY_6_CARET,                                                 %>40/* 0x36 6 */
    KEY_7_AMPERSAND,                                             %>40/* 0x37 7 */
    KEY_8_ASTERISK,                                              %>40/* 0x38 8 */
    KEY_9_OPARENTHESIS,                                          %>40/* 0x39 9 */
    %'ModuleName'%.SHIFT|KEY_SEMICOLON_COLON,                    %>40/* 0x3A : */
    KEY_SEMICOLON_COLON,                                         %>40/* 0x3B ; */
    %'ModuleName'%.SHIFT|KEY_COMMA_AND_LESS,                     %>40/* 0x3C < */
    KEY_EQUAL_PLUS,                                              %>40/* 0x3D = */
    %'ModuleName'%.SHIFT|KEY_DOT_GREATER,                        %>40/* 0x3E > */
    KEY_SLASH_QUESTION,                                          %>40/* 0x3F ? */

    %'ModuleName'%.SHIFT|KEY_2_AT,                               %>40/* 0x40 @ */
    %'ModuleName'%.SHIFT|KEY_A,                                  %>40/* 0x41 A */
    %'ModuleName'%.SHIFT|KEY_B,                                  %>40/* 0x42 B */
    %'ModuleName'%.SHIFT|KEY_C,                                  %>40/* 0x43 C */
    %'ModuleName'%.SHIFT|KEY_D,                                  %>40/* 0x44 D */
    %'ModuleName'%.SHIFT|KEY_E,                                  %>40/* 0x45 E */
    %'ModuleName'%.SHIFT|KEY_F,                                  %>40/* 0x46 F */
    %'ModuleName'%.SHIFT|KEY_G,                                  %>40/* 0x47 G */
    %'ModuleName'%.SHIFT|KEY_H,                                  %>40/* 0x48 H */
    %'ModuleName'%.SHIFT|KEY_I,                                  %>40/* 0x49 I */
    %'ModuleName'%.SHIFT|KEY_J,                                  %>40/* 0x4A J */
    %'ModuleName'%.SHIFT|KEY_K,                                  %>40/* 0x4B K */
    %'ModuleName'%.SHIFT|KEY_L,                                  %>40/* 0x4C L */
    %'ModuleName'%.SHIFT|KEY_M,                                  %>40/* 0x4D M */
    %'ModuleName'%.SHIFT|KEY_N,                                  %>40/* 0x4E N */
    %'ModuleName'%.SHIFT|KEY_O,                                  %>40/* 0x4F O */
    %'ModuleName'%.SHIFT|KEY_P,                                  %>40/* 0x50 P */
    %'ModuleName'%.SHIFT|KEY_Q,                                  %>40/* 0x51 Q */
    %'ModuleName'%.SHIFT|KEY_R,                                  %>40/* 0x52 R */
    %'ModuleName'%.SHIFT|KEY_S,                                  %>40/* 0x53 S */
    %'ModuleName'%.SHIFT|KEY_T,                                  %>40/* 0x55 T */
    %'ModuleName'%.SHIFT|KEY_U,                                  %>40/* 0x55 U */
    %'ModuleName'%.SHIFT|KEY_V,                                  %>40/* 0x56 V */
    %'ModuleName'%.SHIFT|KEY_W,                                  %>40/* 0x57 W */
    %'ModuleName'%.SHIFT|KEY_X,                                  %>40/* 0x58 X */
    %'ModuleName'%.SHIFT|KEY_Y,                                  %>40/* 0x59 Y */
    %'ModuleName'%.SHIFT|KEY_Z,                                  %>40/* 0x5A Z */
    KEY_OBRACKET_AND_OBRACE,                                     %>40/* 0x5B [ */
    KEY_BACKSLASH_VERTICAL_BAR,                                  %>40/* 0x5C '\' */
    KEY_CBRACKET_AND_CBRACE,                                     %>40/* 0x5D ] */
    %'ModuleName'%.SHIFT|KEY_6_CARET,                            %>40/* 0x5E ^ */
    %'ModuleName'%.SHIFT|KEY_MINUS_UNDERSCORE,                   %>40/* 0x5F _ */

    %'ModuleName'%.SHIFT|KEY_GRAVE_ACCENT_AND_TILDE,             %>40/* 0x60 ` */
    KEY_A,                                                       %>40/* 0x61 a */
    KEY_B,                                                       %>40/* 0x62 b */
    KEY_C,                                                       %>40/* 0x63 c */
    KEY_D,                                                       %>40/* 0x66 d */
    KEY_E,                                                       %>40/* 0x65 e */
    KEY_F,                                                       %>40/* 0x66 f */
    KEY_G,                                                       %>40/* 0x67 g */
    KEY_H,                                                       %>40/* 0x68 h */
    KEY_I,                                                       %>40/* 0x69 i */
    KEY_J,                                                       %>40/* 0x6A j */
    KEY_K,                                                       %>40/* 0x6B k */
    KEY_L,                                                       %>40/* 0x6C l */
    KEY_M,                                                       %>40/* 0x6D m */
    KEY_N,                                                       %>40/* 0x6E n */
    KEY_O,                                                       %>40/* 0x6F o */
    KEY_P,                                                       %>40/* 0x70 p */
    KEY_Q,                                                       %>40/* 0x71 q */
    KEY_R,                                                       %>40/* 0x72 r */
    KEY_S,                                                       %>40/* 0x73 s */
    KEY_T,                                                       %>40/* 0x75 t */
    KEY_U,                                                       %>40/* 0x75 u */
    KEY_V,                                                       %>40/* 0x76 v */
    KEY_W,                                                       %>40/* 0x77 w */
    KEY_X,                                                       %>40/* 0x78 x */
    KEY_Y,                                                       %>40/* 0x79 y */
    KEY_Z,                                                       %>40/* 0x7A z */
    %'ModuleName'%.SHIFT|KEY_OBRACKET_AND_OBRACE,                %>40/* 0x7B { */
    %'ModuleName'%.SHIFT|KEY_BACKSLASH_VERTICAL_BAR,             %>40/* 0x7C | */
    %'ModuleName'%.SHIFT|KEY_CBRACKET_AND_CBRACE,                %>40/* 0x7D } */
    KEY_NONUS_NUMBER_SIGN_TILDE,                                 %>40/* 0x7E ~ */
    KEY_DELETE                                                   %>40/* 0x7F Delete */
};

byte %'ModuleName'%.%HidCodeFromAscii(byte ch)
{
  if (ch&0x80){ /* only handle 0x00..0x7F */
    return '\0';
  }
  return (byte)hidKeyCode[ch];
}

%endif %- HidCodeFromAscii
%-BW_METHOD_END HidCodeFromAscii
%-************************************************************************************************************
%-BW_METHOD_BEGIN ModifierCodeFromAscii
%ifdef ModifierCodeFromAscii
%define! Parch
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceModifierCodeFromAscii.Inc
byte %'ModuleName'%.%ModifierCodeFromAscii(byte ch)
{
  if (ch&0x80){ /* only handle 0x00..0x7F */
    return '\0';
  }
  return (byte)(hidKeyCode[ch]>>8);
}

%endif %- ModifierCodeFromAscii
%-BW_METHOD_END ModifierCodeFromAscii
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
%define! Parch
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceSendChar.Inc
byte %'ModuleName'%.%SendChar(byte ch)
{
  if (ch&0x7F) { /* only handle 0x00..0x7F */
    if (%@TxBuffer@'ModuleName'%.Put(hidKeyCode[ch])!=ERR_OK) { /* put 16bit value (modifier|code) into buffer */
      return ERR_FAILED;
    }
  }
  return (%@TxBuffer@'ModuleName'%.Put((MODIFERKEYS_NONE<<8)|KEY_NONE)!=ERR_OK); /* send release message */
}

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendStr
%ifdef SendStr
%define! Parstr
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceSendStr.Inc
byte %'ModuleName'%.%SendStr(byte *str)
{
  uint8_t prev;

  prev = '\0';
  while (*str!='\0') {
    if (*str==prev) { /* twice the same character: need to send release first */
      if (%@TxBuffer@'ModuleName'%.Put((MODIFERKEYS_NONE<<8)|KEY_NONE)!=ERR_OK) { /* not enough space in buffer */
        return ERR_TXFULL;
      }
    }
    if ((*str)&0x7F) { /* only handle 0x00..0x7F */
      if (%@TxBuffer@'ModuleName'%.Put(hidKeyCode[*str])!=ERR_OK) { /* put 16bit value (modifier|code) into buffer */
        return ERR_TXFULL;
      }
    }
    prev = *str;
    str++;
  }
  if (%@TxBuffer@'ModuleName'%.Put((MODIFERKEYS_NONE<<8)|KEY_NONE)!=ERR_OK) { /* send release message */
    return ERR_TXFULL;
  }
  return ERR_OK;
}

%endif %- SendStr
%-BW_METHOD_END SendStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Send
%ifdef Send
%define! Parmodifier
%define! Parkey
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceSend.Inc
byte %'ModuleName'%.%Send(byte modifier, byte key)
{
  return %@TxBuffer@'ModuleName'%.Put((modifier<<8)|key); /* put 16bit value (modifier|code) into buffer */
}

%endif %- Send
%-BW_METHOD_END Send
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnumerated
%ifdef isEnumerated
%define! RetVal
%include Common\FSL_USB_HID_Keyboard_DeviceisEnumerated.Inc
bool %'ModuleName'%.%isEnumerated(void)
{
  return keyboard_init;
}

%endif %- isEnumerated
%-BW_METHOD_END isEnumerated
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnEvent
%ifdef OnEvent
%IMPLEMENTATION OnEvent
%define! Parerror
%include Common\FSL_USB_HID_Keyboard_DeviceOnEvent.Inc
void %OnEvent(byte error)
{
  /* Write your code here ... */
}

%endif %- OnEvent
%-BW_METHOD_END OnEvent
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
