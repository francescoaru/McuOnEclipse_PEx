<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>XFormat</Name>
    <Description>Utililty with printf() like functionality</Description>
    <Author>Mario Viara</Author>
    <Version>01.015</Version>
    <Icon>XFormat</Icon>
    <TypesFiles>PE,XFormat\XFormat</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <BW_HelpType>BasicPlusUsage</BW_HelpType>
    <BW_HelpFiles>,Properties,Methods,Events,"Typical Usage"</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>no</BW_NeedTps>
    <BW_NeedUst>2</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright>License   :  Open Source (LGPL)\nCopyright : (c) Copyright Mario Viara, 2014-2016, https://github.com/MarioViara/xprintfc\nhttp      : http://www.mcuoneclipse.com\n\nThis an open source software implementing a command line shell with Processor Expert.\nThis is a free software and is opened for education,  research  and commercial developments under license policy of following terms:\n* This is a free software and there is NO WARRANTY.\n* No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.\n* Redistributions of source code must retain the above copyright notice.</Copyright>
    <Category>SW-Tools Library</Category>
    <DemoDriver>no</DemoDriver>
    <Shortcut>XF</Shortcut>
    <BeanLevel>High</BeanLevel>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
    <Property>
      <TInhrLinkItem>
        <Name>SDK</Name>
        <Symbol>sdk</Symbol>
        <TypeSpec>XFormat\sdk</TypeSpec>
        <Hint>Link to SDK</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <DefaultValue/>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <SortStyle/>
      </TInhrLinkItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>Floating Point</Name>
        <Symbol>FloatingPointEnabled</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If floating point formatting strings are supported (%f)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>xvformat</Name>
        <Symbol>xvformat</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Printf() like format function</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>outchar</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Function pointer to the function to output one char.</ParHint>
          <ParUserDeclaration>void (*outchar)(void *,char)</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>arg</ParName>
          <ParType>pointer</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Argument for the output function.</ParHint>
          <ParUserDeclaration>void *arg</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>fmt</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Format options for the list of parameters.</ParHint>
          <ParUserDeclaration>const char * fmt</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>args</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>List of parameters</ParHint>
          <ParUserDeclaration>va_list args</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>unsigned #M#_#C#(void (*outchar)(void *,char), void *arg, const char * fmt, va_list args)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>xformat</Name>
        <Symbol>xformat</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Printf() like function using variable arguments</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>outchar</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Function pointer to output one new character</ParHint>
          <ParUserDeclaration>void (*outchar)(void *,char)</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>arg</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Argument for the output function</ParHint>
          <ParUserDeclaration>void *arg</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>fmt</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Format options for the list of parameters</ParHint>
          <ParUserDeclaration>const char * fmt</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>openArgList</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Open argument list</ParHint>
          <ParUserDeclaration>...</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>unsigned #M#_#C#(void (*outchar)(void *,char), void *arg, const char * fmt, ...)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>xsprintf</Name>
        <Symbol>xsprintf</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>sprintf() like function</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>number of characters written, negative for error case</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>buf</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to buffer to be written</ParHint>
        </Parameter>
        <Parameter>
          <ParName>fmt</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to formatting string</ParHint>
          <ParUserDeclaration>const char *fmt</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>argList</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Open Argument List</ParHint>
          <ParUserDeclaration>...</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(char *buf, const char *fmt, ...)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>
