<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>LEDpin</Name>
  <Description>Interface to the LED pin</Description>
  <Author>Erich Styger</Author>
  <Version>01.005</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetVal</Name>
        <Symbol>GetVal</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns the input/output value. If the direction is &lt;b&gt;input&lt;/b&gt; then the input value of the pin is read and returned. If the direction is &lt;b&gt;output&lt;/b&gt; then the last written value is returned (see &lt;a href="BitIOProperties.html#SafeMode"&gt;Safe mode&lt;/a&gt; property for limitations).</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>Boolean</ReturnType>
        <RetHint>Input value. Possible values:\n     FALSE - logical "0" (Low level)\n     TRUE - logical "1" (High level)</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ClrVal</Name>
        <Symbol>ClrVal</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Clears (set to zero) the output value. It is equivalent to the &lt;tt&gt;PutVal(FALSE)&lt;/tt&gt;. This method is available only if the direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetVal</Name>
        <Symbol>SetVal</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets (to one) the output value. It is equivalent to the &lt;tt&gt;PutVal(TRUE)&lt;/tt&gt;. This method is available only if the direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>NegVal</Name>
        <Symbol>NegVal</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Negates (inverts) the output value. It is equivalent to the &lt;tt&gt;PutVal(!GetVal())&lt;/tt&gt;. This method is available only if the direction = &lt;u&gt;&lt;tt&gt;output&lt;/tt&gt;&lt;/u&gt; or &lt;u&gt;&lt;tt&gt;input/output&lt;/tt&gt;&lt;/u&gt;.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>true</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>false</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>void</ReturnType>
        <RetHint/>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>LEDpin</Template>
    <Template>genericBitIO</Template>
    <Template>SDK_BitIO</Template>
  </Registration>
  <UserTypes>
    <EmptySection_DummyValue/>
  </UserTypes>
</Interface>
